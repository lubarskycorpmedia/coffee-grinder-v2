# scripts/test_pipeline_without_sheets.py
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pipeline –±–µ–∑ Google Sheets —ç–∫—Å–ø–æ—Ä—Ç–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É fetcher + deduplication
"""
import sys
import os
import json
from datetime import datetime
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.services.news.pipeline import NewsPipelineOrchestrator
from src.services.news.fetchers.thenewsapi_com import TheNewsAPIFetcher
from src.langchain.news_chain import NewsProcessingChain
from src.config import get_settings, get_faiss_settings


def test_pipeline_stages():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ pipeline"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ pipeline –±–µ–∑ Google Sheets")
    print("=" * 60)
    
    settings = get_settings()
    faiss_settings = get_faiss_settings()
    
    if not settings.THENEWSAPI_API_TOKEN:
        print("‚ùå THENEWSAPI_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not settings.OPENAI_API_KEY:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_params = {
        "query": "artificial intelligence",
        "categories": "tech,business",
        "limit": 5,
        "language": "en"
    }
    
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params}")
    print()
    
    # –≠–¢–ê–ü 1: Fetcher
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fetcher")
    print("-" * 40)
    
    try:
        fetcher = TheNewsAPIFetcher(settings.THENEWSAPI_API_TOKEN)
        
        start_time = datetime.now()
        response = fetcher.fetch_news(**test_params)
        fetch_time = (datetime.now() - start_time).total_seconds()
        
        if "error" in response:
            print(f"‚ùå –û—à–∏–±–∫–∞ fetcher: {response['error']}")
            return False
        
        articles = response.get("articles", [])
        print(f"‚úÖ Fetcher —É—Å–ø–µ—à–Ω–æ: {len(articles)} —Å—Ç–∞—Ç–µ–π –∑–∞ {fetch_time:.2f}s")
        
        if articles:
            print(f"   üì∞ –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è: {articles[0].get('title', 'No title')[:60]}...")
            print(f"   üìÖ –î–∞—Ç–∞: {articles[0].get('published_at', 'No date')}")
            print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {articles[0].get('category', 'No category')}")
        print()
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ fetcher: {e}")
        return False
    
    # –≠–¢–ê–ü 2: Deduplication
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Deduplication")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º NewsProcessingChain
        news_chain = NewsProcessingChain(
            similarity_threshold=faiss_settings.FAISS_SIMILARITY_THRESHOLD,
            max_news_items=faiss_settings.MAX_NEWS_ITEMS_FOR_PROCESSING
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—å–∏ –≤ NewsItem (–∫–∞–∫ –≤ pipeline)
        from src.services.news.news_processor import NewsItem
        
        news_items = []
        for article in articles:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                published_at_str = article.get("published_at", "")
                if published_at_str:
                    if published_at_str.endswith("Z"):
                        published_at = datetime.fromisoformat(published_at_str.replace("Z", "+00:00"))
                    elif "+" in published_at_str:
                        published_at = datetime.fromisoformat(published_at_str)
                    else:
                        published_at = datetime.fromisoformat(published_at_str + "+00:00")
                else:
                    published_at = datetime.now()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º source –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                source_data = article.get("source", "")
                if isinstance(source_data, dict):
                    # –ï—Å–ª–∏ source - —ç—Ç–æ dict, –∏–∑–≤–ª–µ–∫–∞–µ–º name
                    source_name = source_data.get("name", "") or source_data.get("id", "") or ""
                else:
                    # –ï—Å–ª–∏ source —É–∂–µ —Å—Ç—Ä–æ–∫–∞
                    source_name = str(source_data) if source_data else ""
                
                news_item = NewsItem(
                    title=article.get("title", ""),
                    description=article.get("description", ""),
                    url=article.get("url", ""),
                    published_at=published_at,
                    source=source_name,
                    category=article.get("category"),
                    language=article.get("language", "en")
                )
                news_items.append(news_item)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—å–∏: {e}")
                continue
        
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(news_items)} NewsItem –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ NewsChain
        ranking_criteria = """
        –†–∞–Ω–∂–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è IT-–∞—É–¥–∏—Ç–æ—Ä–∏–∏:
        1. –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∏–Ω–¥—É—Å—Ç—Ä–∏—é
        2. –ù–æ–≤–∏–∑–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
        4. –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        """
        
        start_time = datetime.now()
        processed_articles = news_chain.process_news(
            news_items=news_items,
            ranking_criteria=ranking_criteria,
            fail_on_errors=False
        )
        dedup_time = (datetime.now() - start_time).total_seconds()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        duplicates_count = sum(1 for item in processed_articles if item.is_duplicate)
        unique_count = len(processed_articles) - duplicates_count
        
        print(f"‚úÖ Deduplication —É—Å–ø–µ—à–Ω–æ –∑–∞ {dedup_time:.2f}s")
        print(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {len(news_items)} —Å—Ç–∞—Ç–µ–π")
        print(f"   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_count}")
        print(f"   üìä –î—É–±–ª–µ–π: {duplicates_count}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å—Ç–∞—Ç—å–∏
        unique_articles = [item for item in processed_articles if not item.is_duplicate]
        if unique_articles:
            print("üèÜ –¢–æ–ø-3 —Å—Ç–∞—Ç—å–∏ –ø–æ —Ä–∞–Ω–≥—É:")
            for i, article in enumerate(unique_articles[:3], 1):
                print(f"   {i}. {article.title[:50]}...")
                ranking_score = getattr(article, 'ranking_score', 0.0)
                print(f"      –†–∞–Ω–≥: {ranking_score:.2f}")
                print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫: {article.source}")
                print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ deduplication: {e}")
        return False


def test_full_pipeline_mock():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline —Å mock —ç–∫—Å–ø–æ—Ä—Ç–æ–º"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline (—Å mock —ç–∫—Å–ø–æ—Ä—Ç–æ–º)")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = NewsPipelineOrchestrator(
        provider="thenewsapi",
        worksheet_name="TestMock"
    )
    
    # –ó–∞–º–µ–Ω—è–µ–º exporter –Ω–∞ mock
    class MockExporter:
        def __init__(self):
            self.exported_articles = []
            self.spreadsheet_id = "mock_spreadsheet_id_12345"
        
        def export_news(self, articles, append=True):
            self.exported_articles = articles
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º exporter
    mock_exporter = MockExporter()
    orchestrator._exporter = mock_exporter
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
    test_params = {
        "query": "artificial intelligence",
        "categories": ["tech", "business"],
        "limit": 5
    }
    
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params}")
    print()
    
    start_time = datetime.now()
    result = orchestrator.run_pipeline(**test_params)
    total_time = (datetime.now() - start_time).total_seconds()
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}s")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç pipeline:")
    print(f"   –£—Å–ø–µ—Ö: {'‚úÖ' if result.success else '‚ùå'}")
    print(f"   –≠—Ç–∞–ø—ã: {result.completed_stages}/{result.total_stages}")
    print(f"   –í—Ä–µ–º—è: {result.total_execution_time:.2f}s")
    print()
    
    if result.errors:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
        for error in result.errors:
            print(f"   - {error}")
        print()
    
    # –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–æ–≤
    for stage_name, stage_result in result.results.items():
        status = "‚úÖ" if stage_result.success else "‚ùå"
        print(f"   {stage_name}: {status} ({stage_result.execution_time:.2f}s)")
        if stage_result.error_message:
            print(f"      –û—à–∏–±–∫–∞: {stage_result.error_message}")
        if stage_result.data:
            if "articles_count" in stage_result.data:
                print(f"      –°—Ç–∞—Ç–µ–π: {stage_result.data['articles_count']}")
            if "exported_count" in stage_result.data:
                print(f"      –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stage_result.data['exported_count']}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º mock —ç–∫—Å–ø–æ—Ä—Ç
    if mock_exporter.exported_articles:
        print(f"üì§ Mock —ç–∫—Å–ø–æ—Ä—Ç: {len(mock_exporter.exported_articles)} —Å—Ç–∞—Ç–µ–π")
        print("   –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è:")
        first_article = mock_exporter.exported_articles[0]
        print(f"   üì∞ {first_article.title[:60]}...")
        print(f"   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {first_article.category}")
        ranking_score = getattr(first_article, 'ranking_score', 0.0)
        print(f"   üìä –†–∞–Ω–≥: {ranking_score:.2f}")
    
    return result.success


if __name__ == "__main__":
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsPipelineOrchestrator –±–µ–∑ Google Sheets")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: –û—Ç–¥–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
    success1 = test_pipeline_stages()
    
    print("\n" + "="*70 + "\n")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π pipeline —Å mock
    success2 = test_full_pipeline_mock()
    
    print("\n" + "="*70)
    
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° Pipeline –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets)")
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π") 