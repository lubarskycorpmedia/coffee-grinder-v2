#!/usr/bin/env python3
# /scripts/test_rubrics_pipeline.py

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ run_all_rubrics —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏
"""

import sys
import os
import json
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.services.news.rubrics_config import get_rubrics_config, get_active_rubrics
from src.services.news.pipeline import create_news_pipeline_orchestrator
from src.config import get_google_settings
from dotenv import load_dotenv


def test_rubrics_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä—É–±—Ä–∏–∫"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä—É–±—Ä–∏–∫ ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—É–±—Ä–∏–∫–∏
    all_rubrics = get_rubrics_config()
    print(f"–í—Å–µ–≥–æ —Ä—É–±—Ä–∏–∫: {len(all_rubrics)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏
    active_rubrics = get_active_rubrics()
    print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–±—Ä–∏–∫: {len(active_rubrics)}")
    
    print("\n–í—Å–µ —Ä—É–±—Ä–∏–∫–∏:")
    for i, rubric in enumerate(all_rubrics, 1):
        status = "‚úÖ –ê–ö–¢–ò–í–ù–ê" if rubric in active_rubrics else "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
        print(f"{i:2d}. {rubric['rubric']:20} | {rubric['category']:15} | {rubric['query']:30} | {status}")
    
    print("\n–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏:")
    for i, rubric in enumerate(active_rubrics, 1):
        print(f"{i:2d}. {rubric['rubric']:20} | {rubric['category']:15} | {rubric['query']:30}")
    
    return active_rubrics


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    local_service_account_path = ".config/google_service_account.json"
    if os.path.exists(local_service_account_path):
        os.environ['GOOGLE_SERVICE_ACCOUNT_PATH'] = local_service_account_path
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π service account: {local_service_account_path}")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        get_google_settings.cache_clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = os.path.join(os.path.dirname(__file__), '..', '.env')
    if not os.path.exists(env_file):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("   - THENEWSAPI_API_TOKEN")
        print("   - OPENAI_API_KEY")
        print("   - GOOGLE_SHEET_ID")
        print("   - GOOGLE_SERVICE_ACCOUNT_PATH")
        print("   - GOOGLE_ACCOUNT_EMAIL")
        print("   - GOOGLE_ACCOUNT_KEY")
        return False
    
    print(f"‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_file}")
    return True


def test_pipeline_orchestrator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ pipeline"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===")
    
    try:
        orchestrator = create_news_pipeline_orchestrator(
            provider="thenewsapi",
            worksheet_name="RubricsTest"
        )
        print("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = orchestrator.get_pipeline_status()
        print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {status['provider']}")
        print(f"–õ–∏—Å—Ç: {status['worksheet_name']}")
        print(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {status['components']}")
        
        return orchestrator
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return None


def test_run_all_rubrics_real(orchestrator):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ run_all_rubrics —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ run_all_rubrics (–†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï) ===")
    
    if not orchestrator:
        print("‚ùå –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(orchestrator, 'run_all_rubrics'):
            print("‚ùå –ú–µ—Ç–æ–¥ run_all_rubrics –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        print("‚úÖ –ú–µ—Ç–æ–¥ run_all_rubrics –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        active_rubrics = get_active_rubrics()
        print(f"–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(active_rubrics)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–±—Ä–∏–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        print("\n–†—É–±—Ä–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for i, rubric in enumerate(active_rubrics, 1):
            print(f"{i:2d}. {rubric['rubric']} -> query: '{rubric['query']}', category: '{rubric['category']}'")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_limit = 3  # –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π run_all_rubrics —Å limit={test_limit}...")
        print("‚ö†Ô∏è  –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥–∞—è —Ä—É–±—Ä–∏–∫–∞!")
        
        start_time = datetime.now()
        
        # –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í API
        results = orchestrator.run_all_rubrics(limit=test_limit)
        
        end_time = datetime.now()
        total_time = (end_time - start_time).total_seconds()
        
        print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f}s")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä—É–±—Ä–∏–∫: {len(results)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analyze_rubrics_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        save_rubrics_result_to_file(results, f"rubrics_test_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return None


def analyze_rubrics_results(results):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ä—É–±—Ä–∏–∫"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ä—É–±—Ä–∏–∫–∞–º:")
    print("=" * 60)
    
    successful_rubrics = 0
    failed_rubrics = 0
    total_articles = 0
    
    for i, result in enumerate(results, 1):
        rubric_name = result.get('rubric', 'Unknown')
        pipeline_result = result.get('pipeline_result')
        error = result.get('error')
        
        print(f"\n{i:2d}. {rubric_name}")
        print(f"    Query: '{result.get('query', '')}'")
        print(f"    Category: {result.get('category', '')}")
        
        if error:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {error}")
            failed_rubrics += 1
        elif pipeline_result:
            if pipeline_result.success:
                print(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ")
                print(f"    –≠—Ç–∞–ø—ã: {pipeline_result.completed_stages}/{pipeline_result.total_stages}")
                print(f"    –í—Ä–µ–º—è: {pipeline_result.total_execution_time:.2f}s")
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏
                fetcher_data = pipeline_result.results.get('fetcher', {}).data
                if fetcher_data:
                    articles_count = fetcher_data.get('articles_count', 0)
                    total_articles += articles_count
                    print(f"    –°—Ç–∞—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {articles_count}")
                
                successful_rubrics += 1
            else:
                print(f"    ‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                print(f"    –≠—Ç–∞–ø—ã: {pipeline_result.completed_stages}/{pipeline_result.total_stages}")
                if pipeline_result.errors:
                    print(f"    –û—à–∏–±–∫–∏: {'; '.join(pipeline_result.errors)}")
                failed_rubrics += 1
        else:
            print("    ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            failed_rubrics += 1
    
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ä—É–±—Ä–∏–∫: {successful_rubrics}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ä—É–±—Ä–∏–∫: {failed_rubrics}")
    print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}")
    print(f"   –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_articles}")
    
    success_rate = (successful_rubrics / len(results)) * 100 if results else 0
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")


def save_rubrics_result_to_file(results, filename):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä—É–±—Ä–∏–∫ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        json_results = []
        
        for result in results:
            json_result = {
                "rubric": result.get("rubric"),
                "category": result.get("category"),
                "query": result.get("query"),
                "error": result.get("error")
            }
            
            pipeline_result = result.get("pipeline_result")
            if pipeline_result:
                json_result["pipeline_result"] = {
                    "success": pipeline_result.success,
                    "total_stages": pipeline_result.total_stages,
                    "completed_stages": pipeline_result.completed_stages,
                    "total_execution_time": pipeline_result.total_execution_time,
                    "errors": pipeline_result.errors,
                    "results": {}
                }
                
                for stage_name, stage_result in pipeline_result.results.items():
                    json_result["pipeline_result"]["results"][stage_name] = {
                        "success": stage_result.success,
                        "execution_time": stage_result.execution_time,
                        "error_message": stage_result.error_message,
                        "data": stage_result.data
                    }
            
            json_results.append(json_result)
        
        filepath = os.path.join(os.path.dirname(__file__), filename)
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(json_results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filepath}")
        
    except Exception as e:
        print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")


def test_run_all_rubrics_dry_run(orchestrator):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥ run_all_rubrics (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)"""
    print("\n=== –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä run_all_rubrics ===")
    
    if not orchestrator:
        print("‚ùå –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(orchestrator, 'run_all_rubrics'):
            print("‚úÖ –ú–µ—Ç–æ–¥ run_all_rubrics –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            active_rubrics = get_active_rubrics()
            print(f"–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(active_rubrics)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–±—Ä–∏–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
            print("\n–†—É–±—Ä–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for i, rubric in enumerate(active_rubrics, 1):
                print(f"{i:2d}. {rubric['rubric']} -> query: '{rubric['query']}', category: '{rubric['category']}'")
            
            print(f"\nüí° –î–ª—è –∫–∞–∂–¥–æ–π —Ä—É–±—Ä–∏–∫–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω—ã–π pipeline:")
            print("   1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ API")
            print("   2. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LangChain/FAISS")
            print("   3. –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets")
            
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ run_all_rubrics –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä—É–±—Ä–∏–∫ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not setup_environment():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    active_rubrics = test_rubrics_config()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    orchestrator = test_pipeline_orchestrator()
    
    if not orchestrator:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    test_run_all_rubrics_dry_run(orchestrator)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    print("\n" + "=" * 70)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç —Å API –≤—ã–∑–æ–≤–∞–º–∏!")
    print("   –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç API –∫–≤–æ—Ç—ã")
    print("   –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—É–±—Ä–∏–∫–∏")
    
    response = input("\nü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', '–¥–∞']:
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç...")
        results = test_run_all_rubrics_real(orchestrator)
        
        if results:
            print("\nüéâ –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä—É–±—Ä–∏–∫: {len(results)}")
            
            successful_count = len([r for r in results if r.get('pipeline_result') and r['pipeline_result'].success])
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_count}")
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(results) - successful_count}")
        else:
            print("üí• –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("\n‚úã –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   orchestrator = create_news_pipeline_orchestrator()")
        print("   results = orchestrator.run_all_rubrics(limit=3)")
    
    print("\n" + "=" * 70)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    if active_rubrics:
        print(f"\nüìä –ò—Ç–æ–≥–æ: {len(active_rubrics)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—É–±—Ä–∏–∫ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ")


if __name__ == "__main__":
    main() 