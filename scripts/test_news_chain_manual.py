#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã LangChain –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
"""

import os
import sys
import json
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from src.services.news.fetcher_fabric import create_news_fetcher_with_config
from src.langchain.news_chain import NewsItem, NewsProcessingChain
from src.openai_client import OpenAIClient
from src.logger import setup_logger

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í - –†–ï–î–ê–ö–¢–ò–†–£–ô–¢–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ó–î–ï–°–¨
# ============================================================================

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
NEWS_FETCH_PARAMS = {
    "search": "Trump",    # –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    "language": "en",                      # –Ø–∑—ã–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    "limit": 10,                           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    "sort": "relevance_score",             # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    "sort_order": "desc",                  # –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    "categories": "general,politics,tech,business",         # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    "published_on": "2025-06-05",         # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–ø–æ—á–∫–∏
CHAIN_PARAMS = {
    "similarity_threshold": 0.85,          # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    "max_news_items": 5,                   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –≤—ã—Ö–æ–¥–µ
    "ranking_criteria": "relevance,freshness,source_authority",  # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
}

# ============================================================================

def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π .env —Ñ–∞–π–ª–∞"""
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    env_file = os.path.join(project_root, '.env')
    
    if os.path.exists(env_file):
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file)
            print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    else:
        print("‚ÑπÔ∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = {
        'THENEWSAPI_API_TOKEN': 'API —Ç–æ–∫–µ–Ω –¥–ª—è TheNewsAPI',
        'OPENAI_API_KEY': 'API –∫–ª—é—á –¥–ª—è OpenAI',
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value == 'your_token_here' or value.startswith('sk-test'):
            missing_vars.append(f"{var} ({description})")
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_vars:
            print(f"   - {var}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    return True


def convert_api_news_to_news_items(api_news: List[Dict]) -> List[NewsItem]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ API –≤ –æ–±—ä–µ–∫—Ç—ã NewsItem"""
    news_items = []
    
    for news in api_news:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            published_at = datetime.fromisoformat(
                news.get('published_at', '').replace('Z', '+00:00')
            ) if news.get('published_at') else datetime.now()
            
            news_item = NewsItem(
                title=news.get('title', ''),
                description=news.get('description', ''),
                url=news.get('url', ''),
                published_at=published_at,
                source=news.get('source', ''),
                category=news.get('category'),
                language=news.get('language')
            )
            
            news_items.append(news_item)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            continue
    
    return news_items


def print_news_item_details(news_item: NewsItem, index: int):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ—Å—Ç–∏"""
    print(f"üìÑ –ù–æ–≤–æ—Å—Ç—å {index}:")
    print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news_item.title}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {news_item.description[:100]}..." if len(news_item.description) > 100 else f"   –û–ø–∏—Å–∞–Ω–∏–µ: {news_item.description}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news_item.source}")
    print(f"   URL: {news_item.url}")
    print(f"   –î–∞—Ç–∞: {news_item.published_at.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news_item.category}")
    print(f"   –Ø–∑—ã–∫: {news_item.language}")
    print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {news_item.relevance_score:.2f}")
    print(f"   –°—Ö–æ–∂–µ—Å—Ç—å: {news_item.similarity_score:.2f}")
    print(f"   –î—É–±–ª–∏–∫–∞—Ç: {'–î–∞' if news_item.is_duplicate else '–ù–µ—Ç'}")
    if news_item.duplicate_of:
        print(f"   –î—É–±–ª–∏–∫–∞—Ç –æ—Ç: {news_item.duplicate_of}")
    if news_item.embedding is not None:
        print(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥: {len(news_item.embedding)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
    print()


def test_news_processing_chain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger = setup_logger("test_news_chain")
    
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LangChain –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏...")
    logger.info("=" * 60)
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ fetcher
        logger.info("üì∞ –®–ê–ì 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ fetcher")
        logger.info("‚îÄ" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:")
        for key, value in NEWS_FETCH_PARAMS.items():
            logger.info(f"  - {key}: {value}")
        
        fetcher = create_news_fetcher_with_config("thenewsapi")
        raw_news = fetcher.fetch_all_news(**NEWS_FETCH_PARAMS)
        
        if "error" in raw_news:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {raw_news['error']}")
            return False
        
        api_news = raw_news.get('data', [])
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(api_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ API")
        
        if not api_news:
            logger.warning("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞")
            return False
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã NewsItem
        news_items = convert_api_news_to_news_items(api_news)
        logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –≤ NewsItem")
        
        print("\nüìã –ü–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for i, news_item in enumerate(news_items[:3], 1):
            print_news_item_details(news_item, i)
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        logger.info("ü§ñ –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ OpenAI –∫–ª–∏–µ–Ω—Ç–∞")
        logger.info("‚îÄ" * 50)
        
        openai_client = OpenAIClient()
        logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üîó –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        logger.info("‚îÄ" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ø–æ—á–∫–∏
        logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ø–æ—á–∫–∏:")
        for key, value in CHAIN_PARAMS.items():
            logger.info(f"  - {key}: {value}")
        
        chain = NewsProcessingChain(
            openai_client=openai_client,
            similarity_threshold=CHAIN_PARAMS["similarity_threshold"],
            max_news_items=CHAIN_PARAMS["max_news_items"]
        )
        logger.info("‚úÖ –¶–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É
        logger.info("‚öôÔ∏è –®–ê–ì 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É")
        logger.info("‚îÄ" * 50)
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
        
        processed_news = chain.process_news(
            news_items=news_items,
            ranking_criteria=CHAIN_PARAMS["ranking_criteria"]
        )
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ {len(processed_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –®–ê–ì 5: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        logger.info("‚îÄ" * 50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        total_news = len(news_items)
        unique_news = len([n for n in news_items if not n.is_duplicate])
        duplicates = total_news - unique_news
        
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logger.info(f"  - –í—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}")
        logger.info(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {unique_news}")
        logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")
        logger.info(f"  - –ò—Ç–æ–≥–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(processed_news)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        print("\nüéØ –ò–¢–û–ì–û–í–´–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –ù–û–í–û–°–¢–ò:")
        print("=" * 60)
        
        for i, news_item in enumerate(processed_news, 1):
            print_news_item_details(news_item, i)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        duplicates_found = [n for n in news_items if n.is_duplicate]
        if duplicates_found:
            print("\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´:")
            print("=" * 60)
            for i, news_item in enumerate(duplicates_found, 1):
                print_news_item_details(news_item, i)
        
        # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("üß™ –®–ê–ì 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        logger.info("‚îÄ" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        test_text = "Artificial intelligence is transforming the technology industry"
        logger.info(f"üî§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{test_text}'")
        
        embeddings = chain.embeddings.embed_documents([test_text])
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–º {len(embeddings[0])} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("üèÜ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏")
        if processed_news:
            test_news = processed_news[0]
            ranked_news = chain.rank_news([test_news], CHAIN_PARAMS["ranking_criteria"])
            logger.info(f"‚úÖ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ü–µ–Ω–∫–∞: {ranked_news[0].relevance_score:.2f}")
        
        logger.info("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–µ–ø–æ—á–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LANGCHAIN –ù–û–í–û–°–¢–ù–û–ô –¶–ï–ü–û–ß–ö–ò")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüìã –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í:")
    print(f"üì∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π: {len(NEWS_FETCH_PARAMS)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ø–æ—á–∫–∏: {len(CHAIN_PARAMS)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ü–∏—é '–ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í' –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_environment():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ THENEWSAPI_API_TOKEN –∏ OPENAI_API_KEY")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    os.environ.setdefault('GOOGLE_GSHEET_ID', 'test-sheet-id')
    os.environ.setdefault('GOOGLE_ACCOUNT_EMAIL', 'test@example.com')  
    os.environ.setdefault('GOOGLE_ACCOUNT_KEY', 'test-key')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É
    print("\nüîë –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API...")
    success = test_news_processing_chain()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üéâ LangChain –Ω–æ–≤–æ—Å—Ç–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    print("=" * 60)


if __name__ == "__main__":
    main() 