# scripts/check_data_completeness.py
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –≤ pipeline - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
"""
import sys
import os
from datetime import datetime
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.services.news.pipeline import create_news_pipeline_orchestrator
from src.config import get_google_settings
from dotenv import load_dotenv


def check_data_completeness():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö –≤ pipeline"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –≤ pipeline")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    local_service_account_path = ".config/google_service_account.json"
    if os.path.exists(local_service_account_path):
        os.environ['GOOGLE_SERVICE_ACCOUNT_PATH'] = local_service_account_path
        get_google_settings.cache_clear()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = create_news_pipeline_orchestrator(
        provider="thenewsapi",
        worksheet_name="DataCheck"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
    result = orchestrator.run_pipeline(
        query="technology",
        categories=["tech"],
        limit=2  # –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    )
    
    if not result.success:
        print("‚ùå Pipeline –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    dedup_result = result.results.get("deduplication")
    if not dedup_result or not dedup_result.success:
        print("‚ùå –≠—Ç–∞–ø –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return
    
    processed_articles = dedup_result.data["processed_articles"]
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(processed_articles)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
    for i, article in enumerate(processed_articles, 1):
        print(f"üì∞ –°—Ç–∞—Ç—å—è {i}:")
        print(f"   Title: {article.title[:50]}...")
        print(f"   URL: {article.url}")
        print(f"   üñºÔ∏è Image URL: {article.image_url or '–ù–ï–¢'}")
        print(f"   UUID: {article.uuid or '–ù–ï–¢'}")
        print(f"   Keywords: {article.keywords[:50] if article.keywords else '–ù–ï–¢'}...")
        print(f"   Snippet: {article.snippet[:50] if article.snippet else '–ù–ï–¢'}...")
        print(f"   Source: {article.source}")
        print(f"   Category: {article.category}")
        print(f"   Language: {article.language}")
        print(f"   Published: {article.published_at}")
        print(f"   Relevance Score: {article.relevance_score}")
        print(f"   Similarity Score: {article.similarity_score}")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    articles_with_images = [a for a in processed_articles if a.image_url]
    articles_without_images = [a for a in processed_articles if not a.image_url]
    
    print("üìä –°–≤–æ–¥–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:")
    print(f"   ‚úÖ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(articles_with_images)}")
    print(f"   ‚ùå –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(articles_without_images)}")
    
    if articles_with_images:
        print("\\nüñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        for article in articles_with_images[:3]:
            print(f"   - {article.image_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    fields_to_check = {
        "uuid": "UUID",
        "keywords": "Keywords", 
        "snippet": "Snippet",
        "relevance_score": "Relevance Score"
    }
    
    print("\\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—è–º:")
    for field, name in fields_to_check.items():
        filled_count = sum(1 for a in processed_articles if getattr(a, field))
        print(f"   {name}: {filled_count}/{len(processed_articles)} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")


if __name__ == "__main__":
    check_data_completeness() 