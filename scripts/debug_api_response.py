"""
–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
"""
import sys
import os
import json
from datetime import datetime, timedelta
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.services.news.fetchers.thenewsapi_com import TheNewsAPIFetcher
from src.config import get_settings
from dotenv import load_dotenv


def debug_full_api_response():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ TheNewsAPI")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_settings()
    
    if not settings.THENEWSAPI_API_TOKEN:
        print("‚ùå THENEWSAPI_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return
    
    # –°–æ–∑–¥–∞–µ–º fetcher
    fetcher = TheNewsAPIFetcher(settings.THENEWSAPI_API_TOKEN)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    print("üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
    
    response = fetcher.fetch_all_news(
        search="technology",
        language="en",
        categories="tech",
        published_after=week_ago,
        limit=2  # –¢–æ–ª—å–∫–æ 2 —Å—Ç–∞—Ç—å–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    )
    
    if "error" in response:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response['error']}")
        return
    
    articles = response.get("data", [])
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
    
    if not articles:
        print("‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏
    print("\\nüîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–µ—Ä–≤–æ–π —Å—Ç–∞—Ç—å–∏:")
    print("=" * 40)
    
    first_article = articles[0]
    
    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
    print("üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
    for key, value in first_article.items():
        value_preview = str(value)[:100] + "..." if len(str(value)) > 100 else str(value)
        print(f"   {key}: {value_preview}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    print("\\nüñºÔ∏è –ü–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:")
    image_fields = [
        "image", "image_url", "urlToImage", "imageUrl", 
        "thumbnail", "thumbnail_url", "media", "images"
    ]
    
    found_image_fields = []
    for field in image_fields:
        if field in first_article:
            found_image_fields.append(field)
            print(f"   ‚úÖ {field}: {first_article[field]}")
    
    if not found_image_fields:
        print("   ‚ùå –ü–æ–ª—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è:")
        for key in first_article.keys():
            if any(img_word in key.lower() for img_word in ['image', 'photo', 'picture', 'media']):
                print(f"      - {key}: {first_article[key]}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    output_file = "debug_api_full_response.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(response, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
    print("\\nüìä –°–≤–æ–¥–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {len(found_image_fields)}")
    if found_image_fields:
        print(f"   –ü–æ–ª—è: {', '.join(found_image_fields)}")


if __name__ == "__main__":
    debug_full_api_response() 