#!/usr/bin/env python3
# /scripts/test_updated_fetch_news.py

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch_news()
—Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""

import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from src.services.news.fetcher_fabric import create_news_fetcher_with_config
from src.logger import setup_logger
from dotenv import load_dotenv

def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_file = os.path.join(project_root, '.env')
    
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
    else:
        print("‚ÑπÔ∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
    api_token = os.getenv('THENEWSAPI_API_TOKEN')
    if not api_token:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç THENEWSAPI_API_TOKEN")
        return False
    
    print("‚úÖ API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
    return True

def test_updated_fetch_news():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ fetch_news()"""
    logger = setup_logger("test_updated_fetch_news")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    os.environ.setdefault('GOOGLE_GSHEET_ID', 'test-sheet-id')
    os.environ.setdefault('GOOGLE_ACCOUNT_EMAIL', 'test@example.com')  
    os.environ.setdefault('GOOGLE_ACCOUNT_KEY', 'test-key')
    os.environ.setdefault('OPENAI_API_KEY', 'sk-test-key')
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –º–µ—Ç–æ–¥–∞ fetch_news()")
    
    try:
        # –°–æ–∑–¥–∞–µ–º fetcher
        fetcher = create_news_fetcher_with_config("thenewsapi")
        logger.info("‚úÖ Fetcher —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info("üîß –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        logger.info("‚îÄ" * 50)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
        logger.info(f"üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ published_after: {yesterday}")
        logger.info(f"üåê –û–∂–∏–¥–∞–µ–º—ã–π —è–∑—ã–∫: ru")
        logger.info(f"üìÇ –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: general,politics,tech,business")
        logger.info(f"üîÑ –û–∂–∏–¥–∞–µ–º–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: relevance_score desc")
        
        result1 = fetcher.fetch_news(
            query="–ø–æ–ª–∏—Ç–∏–∫–∞",  # –†—É—Å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
            limit=3
        )
        
        if "error" in result1:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {result1['error']}")
        else:
            articles = result1.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            if articles:
                article = articles[0]
                logger.info(f"üì∞ –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è:")
                logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {article.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
                logger.info(f"   –Ø–∑—ã–∫: {article.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   –î–∞—Ç–∞: {article.get('published_at', '–ù–µ—Ç –¥–∞—Ç—ã')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä—É—Å—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        logger.info("üá∑üá∫ –¢–ï–°–¢ 2: –†—É—Å—Å–∫–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        logger.info("‚îÄ" * 50)
        
        result2 = fetcher.fetch_news(
            query="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            limit=2
        )
        
        if "error" in result2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {result2['error']}")
        else:
            articles = result2.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –Ø–∑—ã–∫: {article.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info("üîß –¢–ï–°–¢ 3: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        logger.info("‚îÄ" * 50)
        
        result3 = fetcher.fetch_news(
            query="technology",
            language="en",  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
            category="tech",  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            limit=2
        )
        
        if "error" in result3:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3: {result3['error']}")
        else:
            articles = result3.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π —Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –Ø–∑—ã–∫: {article.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ kwargs
        logger.info("‚öôÔ∏è –¢–ï–°–¢ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ kwargs")
        logger.info("‚îÄ" * 50)
        
        result4 = fetcher.fetch_news(
            query="—ç–∫–æ–Ω–æ–º–∏–∫–∞",
            limit=2,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            sort="published_at",  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            published_after="2025-01-01"  # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        )
        
        if "error" in result4:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 4: {result4['error']}")
        else:
            articles = result4.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –î–∞—Ç–∞: {article.get('published_at', '–ù–µ—Ç –¥–∞—Ç—ã')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        logger.info("üìÇ –¢–ï–°–¢ 5: –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)")
        logger.info("‚îÄ" * 50)
        
        result5 = fetcher.fetch_news(limit=2)
        
        if "error" in result5:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 5: {result5['error']}")
        else:
            articles = result5.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π —Ç–æ–ª—å–∫–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
                logger.info(f"   –Ø–∑—ã–∫: {article.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        logger.info("")
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch_news() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ú–ï–¢–û–î–ê fetch_news()")
    print("=" * 60)
    
    if not load_environment():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    success = test_updated_fetch_news()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ fetch_news() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
        print("   üåê –Ø–∑—ã–∫: ru")
        print("   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: general,politics,tech,business")
        print("   üìÖ –î–∞—Ç–∞: –≤—á–µ—Ä–∞—à–Ω—è—è")
        print("   üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: relevance_score desc")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
    print("=" * 60)

if __name__ == "__main__":
    main() 