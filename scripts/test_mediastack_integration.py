#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MediaStack API
"""

import os
import sys
import asyncio
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.services.news.fetchers.mediastack_com import MediaStackFetcher
from src.services.news.pipeline import create_news_pipeline_orchestrator
from src.config import MediaStackSettings


def test_mediastack_fetcher():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MediaStack fetcher –Ω–∞–ø—Ä—è–º—É—é"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MediaStack Fetcher ===")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)
    settings = MediaStackSettings(
        access_key="test_key",
        enabled=True,
        priority=4
    )
    
    # –°–æ–∑–¥–∞–µ–º fetcher
    fetcher = MediaStackFetcher(settings)
    
    print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {fetcher.PROVIDER_NAME}")
    print(f"–ë–∞–∑–æ–≤—ã–π URL: {fetcher.base_url}")
    print(f"–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {fetcher.page_size}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {fetcher.get_categories()}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {fetcher.get_languages()}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã: {len(fetcher.get_supported_countries())} —Å—Ç—Ä–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞)
    health = fetcher.check_health()
    print(f"Health check: {health}")


def test_mediastack_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MediaStack —á–µ—Ä–µ–∑ pipeline"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MediaStack —á–µ—Ä–µ–∑ Pipeline ===")
    
    # –°–æ–∑–¥–∞–µ–º pipeline —Å MediaStack
    pipeline = create_news_pipeline_orchestrator(provider='mediastack')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = pipeline.get_pipeline_status()
    print(f"Pipeline —Å—Ç–∞—Ç—É—Å: {status}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º fetcher
    fetcher = pipeline.fetcher
    print(f"Fetcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {fetcher.PROVIDER_NAME}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print("\n=== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MediaStack API ===")
    
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π:")
    print("   pipeline.run_pipeline(query='bitcoin', categories=['business'], limit=10)")
    
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:")
    print("   fetcher.fetch_historical_news(date='2023-01-01', categories='technology')")
    
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
    print("   fetcher.get_sources(search='cnn', countries='us', limit=5)")
    
    print("\n4. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:")
    print("   fetcher.search_news(query='AI technology', language='en', limit=20)")


def demonstrate_mediastack_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ MediaStack API"""
    print("\n=== –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ MediaStack API ===")
    
    print("üì∞ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  ‚Ä¢ /v1/news - Live –Ω–æ–≤–æ—Å—Ç–∏ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 30 –º–∏–Ω –Ω–∞ Free –ø–ª–∞–Ω–µ)")
    print("  ‚Ä¢ /v1/news - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (Standard+ –ø–ª–∞–Ω—ã)")
    print("  ‚Ä¢ /v1/sources - –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    print("\nüîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print("  ‚Ä¢ keywords - –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    print("  ‚Ä¢ categories - –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    print("  ‚Ä¢ countries - –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
    print("  ‚Ä¢ languages - –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫–∞–º")
    print("  ‚Ä¢ sources - –í–∫–ª—é—á–∏—Ç—å/–∏—Å–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    print("  ‚Ä¢ date - –î–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    print("  ‚Ä¢ sort - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (published_desc, published_asc, popularity)")
    print("  ‚Ä¢ limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (max 100)")
    print("  ‚Ä¢ offset - –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    
    print("\nüìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print("  ‚Ä¢ 7,500+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("  ‚Ä¢ 50+ —Å—Ç—Ä–∞–Ω")
    print("  ‚Ä¢ 13 —è–∑—ã–∫–æ–≤")
    print("  ‚Ä¢ –¢—ã—Å—è—á–∏ —Å—Ç–∞—Ç–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    
    print("\nüí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("  ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å '-' (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'cnn,-bbc')")
    print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç: '2023-01-01,2023-01-31'")
    print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    print("  ‚Ä¢ Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ 'raw_data'")


if __name__ == "__main__":
    try:
        test_mediastack_fetcher()
        test_mediastack_pipeline()
        demonstrate_mediastack_features()
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è MediaStack —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://mediastack.com/")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MEDIASTACK_API_KEY")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ provider='mediastack' –≤ pipeline")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 