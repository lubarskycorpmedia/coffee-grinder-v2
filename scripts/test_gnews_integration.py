#!/usr/bin/env python3
# scripts/test_gnews_integration.py

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GNews fetcher'–∞
"""

import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.services.news.fetchers.gnews_io import GNewsIOFetcher
from src.services.news.fetcher_fabric import FetcherFactory
from src.config import GNewsIOSettings


def test_gnews_fetcher_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GNews fetcher'–∞"""
    print("=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GNews fetcher'–∞ ===")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = GNewsIOSettings(
        api_key="test_api_key",
        base_url="https://gnews.io/api/v4",
        page_size=10,
        enabled=True,
        priority=1,
        max_retries=3,
        timeout=30
    )
    
    # –°–æ–∑–¥–∞–µ–º fetcher
    fetcher = GNewsIOFetcher(settings)
    
    print(f"‚úì Fetcher —Å–æ–∑–¥–∞–Ω: {type(fetcher).__name__}")
    print(f"‚úì Provider name: {fetcher.PROVIDER_NAME}")
    print(f"‚úì API key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bool(fetcher.api_key)}")
    print(f"‚úì Base URL: {fetcher.base_url}")
    print(f"‚úì Page size: {fetcher.page_size}")
    print()


def test_gnews_categories_and_languages():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —è–∑—ã–∫–æ–≤"""
    print("=== –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —è–∑—ã–∫–æ–≤ ===")
    
    settings = GNewsIOSettings(api_key="test_key")
    fetcher = GNewsIOFetcher(settings)
    
    categories = fetcher.get_categories()
    languages = fetcher.get_languages()
    countries = fetcher.get_countries()
    
    print(f"‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}): {', '.join(categories)}")
    print(f"‚úì –Ø–∑—ã–∫–∏ ({len(languages)}): {', '.join(languages[:10])}...")
    print(f"‚úì –°—Ç—Ä–∞–Ω—ã ({len(countries)}): {', '.join(countries[:10])}...")
    print()


def test_category_mapping():
    """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("=== –¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===")
    
    settings = GNewsIOSettings(api_key="test_key")
    fetcher = GNewsIOFetcher(settings)
    
    test_mappings = [
        ("business", "business"),
        ("tech", "technology"),
        ("sport", "sports"),
        ("finance", "business"),
        ("politics", "nation"),
        ("unknown", None),
        (None, None)
    ]
    
    for input_cat, expected in test_mappings:
        result = fetcher._map_category_to_gnews(input_cat)
        status = "‚úì" if result == expected else "‚úó"
        print(f"{status} '{input_cat}' ‚Üí '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
    print()


def test_factory_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–±—Ä–∏–∫–æ–π fetcher'–æ–≤"""
    print("=== –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–±—Ä–∏–∫–æ–π ===")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π API –∫–ª—é—á
    os.environ['GNEWS_API_KEY'] = 'test_gnews_key'
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        available = FetcherFactory.get_available_providers()
        enabled = FetcherFactory.get_enabled_providers()
        
        print(f"‚úì –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(available)}")
        print(f"‚úì –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {', '.join(enabled)}")
        
        if 'gnews' in available:
            print("‚úì GNews –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö")
        else:
            print("‚úó GNews –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö")
        
        if 'gnews' in enabled:
            print("‚úì GNews –Ω–∞–π–¥–µ–Ω –≤ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö")
        else:
            print("‚úó GNews –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö")
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å fetcher —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        try:
            fetcher = FetcherFactory.create_fetcher_from_config('gnews')
            print(f"‚úì Fetcher —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {type(fetcher).__name__}")
            print(f"‚úì Provider name: {fetcher.PROVIDER_NAME}")
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fetcher'–∞ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {e}")
            
    finally:
        # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if 'GNEWS_API_KEY' in os.environ:
            del os.environ['GNEWS_API_KEY']
    
    print()


def test_article_standardization():
    """–¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏"""
    print("=== –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ ===")
    
    settings = GNewsIOSettings(api_key="test_key")
    fetcher = GNewsIOFetcher(settings)
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç GNews API
    sample_article = {
        "title": "Test Article Title",
        "description": "Test article description",
        "content": "Test article content...",
        "url": "https://example.com/article",
        "image": "https://example.com/image.jpg",
        "publishedAt": "2023-12-01T10:00:00Z",
        "source": {
            "name": "Test Source",
            "url": "https://example.com"
        }
    }
    
    standardized = fetcher._standardize_article(
        sample_article, 
        language="en", 
        category="technology"
    )
    
    print("‚úì –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è:")
    for key, value in standardized.items():
        if key != "raw_data":  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º raw_data –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            print(f"  {key}: {value}")
    
    print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GNews fetcher'–∞\n")
    
    try:
        test_gnews_fetcher_creation()
        test_gnews_categories_and_languages()
        test_category_mapping()
        test_factory_integration()
        test_article_standardization()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main() 