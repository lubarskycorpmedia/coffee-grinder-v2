# scripts/test_real_pipeline.py
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏
"""
import sys
import os
import json
from datetime import datetime
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.services.news.pipeline import create_news_pipeline_orchestrator
from src.config import get_google_settings
from dotenv import load_dotenv


def test_real_pipeline():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≤—ã–∑–æ–≤–∞–º–∏"""
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ NewsPipelineOrch–µ—Å—Çrator")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    local_service_account_path = ".config/google_service_account.json"
    if os.path.exists(local_service_account_path):
        os.environ['GOOGLE_SERVICE_ACCOUNT_PATH'] = local_service_account_path
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π service account: {local_service_account_path}")
    
        # –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        get_google_settings.cache_clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = os.path.join(os.path.dirname(__file__), '..', '.env')
    if not os.path.exists(env_file):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("   - THENEWSAPI_API_TOKEN")
        print("   - OPENAI_API_KEY")
        print("   - GOOGLE_SHEET_ID")
        print("   - GOOGLE_SERVICE_ACCOUNT_PATH")
        print("   - GOOGLE_ACCOUNT_EMAIL")
        print("   - GOOGLE_ACCOUNT_KEY")
        return False
    
    print(f"‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_file}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    try:
        orchestrator = create_news_pipeline_orchestrator(
            provider="thenewsapi",
            worksheet_name="TestPipeline"
        )
        print("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_params = {
        "query": "Putin | Zelensky",
        "categories": ["general", "politics"],
        "limit": 5,  # –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }
    
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for key, value in test_params.items():
        print(f"   {key}: {value}")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
    print("üöÄ –ó–∞–ø—É—Å–∫ pipeline...")
    start_time = datetime.now()
    
    try:
        result = orchestrator.run_pipeline(**test_params)
        
        end_time = datetime.now()
        execution_time = (end_time - start_time).total_seconds()
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}s")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        analyze_pipeline_result(result)
        
        return result.success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pipeline: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False


def analyze_pipeline_result(result):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç pipeline"""
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ pipeline:")
    print(f"   –û–±—â–∏–π —É—Å–ø–µ—Ö: {'‚úÖ –î–ê' if result.success else '‚ùå –ù–ï–¢'}")
    print(f"   –≠—Ç–∞–ø—ã: {result.completed_stages}/{result.total_stages}")
    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.total_execution_time:.2f}s")
    print()
    
    if result.errors:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∏:")
        for error in result.errors:
            print(f"   - {error}")
        print()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    print("üîç –î–µ—Ç–∞–ª–∏ —ç—Ç–∞–ø–æ–≤:")
    
    # –≠—Ç–∞–ø 1: Fetcher
    fetcher_result = result.results.get("fetcher")
    if fetcher_result:
        print(f"   1Ô∏è‚É£ Fetcher: {'‚úÖ' if fetcher_result.success else '‚ùå'}")
        print(f"      –í—Ä–µ–º—è: {fetcher_result.execution_time:.2f}s")
        if fetcher_result.success and fetcher_result.data:
            print(f"      –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {fetcher_result.data.get('articles_count', 0)}")
        if fetcher_result.error_message:
            print(f"      –û—à–∏–±–∫–∞: {fetcher_result.error_message}")
        print()
    
    # –≠—Ç–∞–ø 2: Deduplication
    dedup_result = result.results.get("deduplication")
    if dedup_result:
        print(f"   2Ô∏è‚É£ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: {'‚úÖ' if dedup_result.success else '‚ùå'}")
        print(f"      –í—Ä–µ–º—è: {dedup_result.execution_time:.2f}s")
        if dedup_result.success and dedup_result.data:
            data = dedup_result.data
            print(f"      –ò—Å—Ö–æ–¥–Ω–æ —Å—Ç–∞—Ç–µ–π: {data.get('original_count', 0)}")
            print(f"      –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {data.get('deduplicated_count', 0)}")
            print(f"      –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–µ–π: {data.get('duplicates_count', 0)}")
        if dedup_result.error_message:
            print(f"      –û—à–∏–±–∫–∞: {dedup_result.error_message}")
        print()
    
    # –≠—Ç–∞–ø 3: Export
    export_result = result.results.get("export")
    if export_result:
        print(f"   3Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç: {'‚úÖ' if export_result.success else '‚ùå'}")
        print(f"      –í—Ä–µ–º—è: {export_result.execution_time:.2f}s")
        if export_result.success and export_result.data:
            data = export_result.data
            print(f"      –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {data.get('exported_count', 0)}")
            if 'sheet_url' in data:
                print(f"      URL —Ç–∞–±–ª–∏—Ü—ã: {data['sheet_url']}")
        if export_result.error_message:
            print(f"      –û—à–∏–±–∫–∞: {export_result.error_message}")
        print()


def test_components_individually():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    local_service_account_path = ".config/google_service_account.json"
    if os.path.exists(local_service_account_path):
        os.environ['GOOGLE_SERVICE_ACCOUNT_PATH'] = local_service_account_path
        # –û—á–∏—â–∞–µ–º –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        get_google_settings.cache_clear()
    
    try:
        orchestrator = create_news_pipeline_orchestrator()
        
        # –¢–µ—Å—Ç 1: Fetcher
        print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Fetcher...")
        try:
            fetcher = orchestrator.fetcher
            print(f"   ‚úÖ Fetcher —Å–æ–∑–¥–∞–Ω: {type(fetcher).__name__}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
            response = fetcher.fetch_news(
                query="test",
                categories="tech",
                limit=2,
                language="en"
            )
            
            if response.get("status") == "success":
                articles_count = len(response.get("articles", []))
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {articles_count}")
            else:
                print(f"   ‚ö†Ô∏è –û—Ç–≤–µ—Ç fetcher: {response.get('error', 'Unknown error')}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Fetcher: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 2: News Chain
        print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ News Chain...")
        try:
            news_chain = orchestrator.news_chain
            print(f"   ‚úÖ News Chain —Å–æ–∑–¥–∞–Ω: {type(news_chain).__name__}")
            print(f"   üìä Similarity threshold: {news_chain.similarity_threshold}")
            print(f"   üìä Max items: {news_chain.max_news_items}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ News Chain: {e}")
        
        print()
        
        # –¢–µ—Å—Ç 3: Exporter
        print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Exporter...")
        try:
            exporter = orchestrator.exporter
            print(f"   ‚úÖ Exporter —Å–æ–∑–¥–∞–Ω: {type(exporter).__name__}")
            print(f"   üìä Spreadsheet ID: {exporter.spreadsheet_id}")
            print(f"   üìä Worksheet: {exporter.worksheet_name}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ Exporter: {e}")
            print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –≤ .env")
        
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")


def save_result_to_file(result, filename="pipeline_test_result.json"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        result_dict = {
            "success": result.success,
            "total_stages": result.total_stages,
            "completed_stages": result.completed_stages,
            "total_execution_time": result.total_execution_time,
            "errors": result.errors,
            "results": {}
        }
        
        for stage_name, stage_result in result.results.items():
            result_dict["results"][stage_name] = {
                "success": stage_result.success,
                "execution_time": stage_result.execution_time,
                "error_message": stage_result.error_message,
                "data": stage_result.data
            }
        
        filepath = os.path.join(os.path.dirname(__file__), filename)
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(result_dict, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filepath}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {e}")


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    test_components_individually()
    
    print("\n" + "="*60 + "\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline
    success = test_real_pipeline()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç pipeline –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ .env —Ñ–∞–π–ª–∞")
        print("   2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API (TheNewsAPI, OpenAI)")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets")
        print("   4. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ") 