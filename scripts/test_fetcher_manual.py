#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã fetcher'–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
"""

import os
import sys
import json
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from src.services.news.fetcher_fabric import create_news_fetcher
from src.logger import setup_logger

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í - –†–ï–î–ê–ö–¢–ò–†–£–ô–¢–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ó–î–ï–°–¨
# ============================================================================

# –¢–ï–°–¢ 1: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Headlines (/v1/news/headlines)
# –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ Standard –ø–ª–∞–Ω –∏ –≤—ã—à–µ
HEADLINES_PARAMS = {
    "locale": "us",                    # –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω: us, ca, gb, de –∏ —Ç.–¥.
    "language": "en",                  # –ö–æ–¥—ã —è–∑—ã–∫–æ–≤: en, es, fr, de –∏ —Ç.–¥.
    "headlines_per_category": 3,       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–º–∞–∫—Å. 10)
    "include_similar": True,           # –í–∫–ª—é—á–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏
    # "domains": "cnn.com,bbc.com",    # –î–æ–º–µ–Ω—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # "exclude_domains": "",           # –î–æ–º–µ–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # "source_ids": "",                # ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    # "exclude_source_ids": "",        # ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # "published_on": "2025-01-15",    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
}

# –¢–ï–°–¢ 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è All News (/v1/news/all)
# –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∞—Ö
ALL_NEWS_PARAMS = {
    "search": "Trump",         # –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç +, -, |, —Å–∫–æ–±–∫–∏)
    "language": "ru",                  # –ö–æ–¥—ã —è–∑—ã–∫–æ–≤
    "limit": 3,                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å. 100)
    "sort": "relevance_score",         # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: published_at, relevance_score
    "sort_order": "desc",              # –ü–æ—Ä—è–¥–æ–∫: asc, desc
    # "locale": "us",                  # –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # "domains": "",                   # –î–æ–º–µ–Ω—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    # "exclude_domains": "",           # –î–æ–º–µ–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # "source_ids": "",                # ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    # "exclude_source_ids": "",        # ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    "categories": "general,politics,tech,business",   # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    # "exclude_categories": "sports",  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # "published_after": "2025-01-01", # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)
    # "published_before": "2025-01-15", # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)
    "published_on": "2025-07-06",    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
    # "page": 1,                       # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

# –¢–ï–°–¢ 3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Sources (/v1/news/sources)
# –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∞—Ö
SOURCES_PARAMS = {
    "language": "en",                  # –ö–æ–¥—ã —è–∑—ã–∫–æ–≤
    "locale": "us",                    # –ö–æ–¥—ã —Å—Ç—Ä–∞–Ω
    # "categories": "business,tech",   # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
}

# ============================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í
# ============================================================================

def validate_params():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Headlines –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if "headlines_per_category" in HEADLINES_PARAMS:
        hpc = HEADLINES_PARAMS["headlines_per_category"]
        if not isinstance(hpc, int) or hpc < 1 or hpc > 10:
            errors.append("headlines_per_category –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º All News –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if "limit" in ALL_NEWS_PARAMS:
        limit = ALL_NEWS_PARAMS["limit"]
        if not isinstance(limit, int) or limit < 1 or limit > 100:
            errors.append("limit –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100")
    
    if "sort" in ALL_NEWS_PARAMS:
        valid_sorts = ["published_at", "relevance_score"]
        if ALL_NEWS_PARAMS["sort"] not in valid_sorts:
            errors.append(f"sort –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {valid_sorts}")
    
    if "sort_order" in ALL_NEWS_PARAMS:
        valid_orders = ["asc", "desc"]
        if ALL_NEWS_PARAMS["sort_order"] not in valid_orders:
            errors.append(f"sort_order –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {valid_orders}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD)
    import re
    date_pattern = r'^\d{4}-\d{2}-\d{2}$'
    
    for params_dict in [HEADLINES_PARAMS, ALL_NEWS_PARAMS, SOURCES_PARAMS]:
        for key in ["published_on", "published_after", "published_before"]:
            if key in params_dict and params_dict[key]:
                if not re.match(date_pattern, params_dict[key]):
                    errors.append(f"{key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    
    return errors

# ============================================================================


def test_fetcher_with_real_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fetcher —Å —Ä–µ–∞–ª—å–Ω—ã–º API"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é fetcher'–∞)
    os.environ.setdefault('GOOGLE_GSHEET_ID', 'test-sheet-id')
    os.environ.setdefault('GOOGLE_ACCOUNT_EMAIL', 'test@example.com')  
    os.environ.setdefault('GOOGLE_ACCOUNT_KEY', 'test-key')
    os.environ.setdefault('OPENAI_API_KEY', 'sk-test-key')
    
    logger = setup_logger("test_fetcher")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_token = os.getenv('THENEWSAPI_API_TOKEN')
    if not api_token:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç THENEWSAPI_API_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        logger.info("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å THENEWSAPI_API_TOKEN=your_token_here")
        return False
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    validation_errors = validate_params()
    if validation_errors:
        logger.error("‚ùå –û—à–∏–±–∫–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ç–µ—Å—Ç–æ–≤:")
        for error in validation_errors:
            logger.error(f"   - {error}")
        logger.info("üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        return False
    
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fetcher'–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API...")
    logger.info("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–Ω—ã")
    
    try:
        # –°–æ–∑–¥–∞–µ–º fetcher
        fetcher = create_news_fetcher("thenewsapi")
        logger.info("‚úÖ Fetcher —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ)
        logger.info("üì∞ –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        logger.info("‚îÄ" * 50)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–±–∏—Ä–∞–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        filtered_headlines_params = {k: v for k, v in HEADLINES_PARAMS.items() 
                                   if v is not None and v != ""}
        
        logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        for key, value in filtered_headlines_params.items():
            logger.info(f"  - {key}: {value}")
        
        headlines = fetcher.fetch_headlines(**filtered_headlines_params)
        
        if "error" in headlines:
            logger.warning(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ: {headlines['error']}")
            logger.info("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ TheNewsAPI")
        else:
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(headlines.get('data', {}).get('general', []))} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            general_news = headlines.get('data', {}).get('general', [])
            for i, news in enumerate(general_news[:2], 1):
                logger.info(f"üìÑ –ù–æ–≤–æ—Å—Ç—å {i}: {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   URL: {news.get('url', '–ù–µ—Ç URL')}")
                if news.get('description'):
                    logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {news.get('description')}")
                logger.info("")
        
        logger.info("")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –ø–ª–∞–Ω–µ)
        logger.info("üîç –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
        logger.info("‚îÄ" * 50)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–±–∏—Ä–∞–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        filtered_search_params = {k: v for k, v in ALL_NEWS_PARAMS.items() 
                                if v is not None and v != ""}
        
        logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        for key, value in filtered_search_params.items():
            logger.info(f"  - {key}: {value}")
        
        search_results = fetcher.fetch_all_news(**filtered_search_params)
        
        success_count = 0
        
        if "error" in search_results:
            logger.warning(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {search_results['error']}")
        else:
            found_news = search_results.get('data', [])
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            success_count += 1
            
            for i, news in enumerate(found_news[:2], 1):
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å {i}: {news.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   URL: {news.get('url', '–ù–µ—Ç URL')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –ø–æ–ª—è –∏–∑ API
                logger.info("   üìÑ –í—Å–µ –ø–æ–ª—è –∏–∑ API:")
                for key, value in news.items():
                    if key not in ['title', 'source', 'url']:  # –£–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –≤—ã—à–µ
                        logger.info(f"     {key}: {value}")
                logger.info("")
        
        logger.info("")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        logger.info("üì° –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        logger.info("‚îÄ" * 50)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–±–∏—Ä–∞–µ–º None –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        filtered_sources_params = {k: v for k, v in SOURCES_PARAMS.items() 
                                 if v is not None and v != ""}
        
        logger.info("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:")
        for key, value in filtered_sources_params.items():
            logger.info(f"  - {key}: {value}")
        
        sources = fetcher.get_sources(**filtered_sources_params)
        
        if "error" in sources:
            logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {sources['error']}")
        else:
            sources_list = sources.get('data', [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(sources_list)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            success_count += 1
            
            for i, source in enumerate(sources_list[:3], 1):
                logger.info(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫ {i}: {source.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                logger.info(f"   URL: {source.get('url', '–ù–µ—Ç URL')}")
                if source.get('description'):
                    logger.info(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {source.get('description')}")
                logger.info(f"   –î–æ–º–µ–Ω: {source.get('domain', '–ù–µ—Ç –¥–æ–º–µ–Ω–∞')}")
                logger.info(f"   –°—Ç—Ä–∞–Ω–∞: {source.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   –Ø–∑—ã–∫: {source.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info("")
        
        logger.info("")
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if success_count > 0:
            logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç {success_count} –∏–∑ 3 —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
            return True
        else:
            logger.warning("‚ö†Ô∏è –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ")
            logger.info("üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ TheNewsAPI")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False



def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π .env —Ñ–∞–π–ª–∞"""
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    env_file = os.path.join(project_root, '.env')
    
    if os.path.exists(env_file):
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file)
            print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    else:
        print("‚ÑπÔ∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = {
        'THENEWSAPI_API_TOKEN': 'API —Ç–æ–∫–µ–Ω –¥–ª—è TheNewsAPI',
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value == 'your_token_here':
            missing_vars.append(f"{var} ({description})")
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_vars:
            print(f"   - {var}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ë–û–†–©–ò–ö–ê –ù–û–í–û–°–¢–ï–ô")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüìã –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í:")
    print(f"üì∞ Headlines: {len([k for k, v in HEADLINES_PARAMS.items() if v is not None and v != ''])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"üîç All News: {len([k for k, v in ALL_NEWS_PARAMS.items() if v is not None and v != ''])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"üì° Sources: {len([k for k, v in SOURCES_PARAMS.items() if v is not None and v != ''])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ü–∏—é '–ù–ê–°–¢–†–û–ô–ö–ò –¢–ï–°–¢–û–í' –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_environment():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ docker-compose")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º API
    print("\nüîë –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º API...")
    success = test_fetcher_with_real_api()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üéâ Fetcher —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º API!")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
    print("=" * 60)


if __name__ == "__main__":
    main() 