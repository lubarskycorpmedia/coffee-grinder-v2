// /src/webapp/static/js/app.js

/**
 * Coffee Grinder v2 - Frontend Application
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
 */

class CoffeeGrinderApp {
    constructor() {
        this.statusIndicator = document.getElementById('status-indicator');
        this.statusText = document.getElementById('status-text');
        this.statusTime = document.getElementById('status-time');
        this.statusContainer = document.querySelector('.status');
        this.runForm = document.getElementById('run-form');
        this.submitButton = document.getElementById('submit-button');
        this.alertContainer = document.getElementById('alert-container');
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    init() {
        this.bindEvents();
        this.loadHealthStatus();
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.loadHealthStatus();
        }, 30000);
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        if (this.runForm) {
            this.runForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.runNewsProcessing();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                this.runNewsProcessing();
            }
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async loadHealthStatus() {
        try {
            const response = await fetch('health');
            const data = await response.json();
            
            if (response.ok) {
                this.updateStatus('healthy', `–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç (v${data.version || 'unknown'})`, data.timestamp);
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            this.updateStatus('error', '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', new Date().toISOString());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
     * @param {string} status - healthy –∏–ª–∏ error
     * @param {string} text - —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
     * @param {string} timestamp - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateStatus(status, text, timestamp) {
        if (!this.statusIndicator || !this.statusText || !this.statusTime || !this.statusContainer) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
        this.statusContainer.className = `status ${status}`;
        this.statusIndicator.className = `status-indicator ${status}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        this.statusText.textContent = text;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        try {
            const date = new Date(timestamp);
            this.statusTime.textContent = date.toLocaleString('ru-RU');
        } catch (e) {
            this.statusTime.textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
     */
    async runNewsProcessing() {
        if (!this.runForm || !this.submitButton) {
            return;
        }

        const formData = new FormData(this.runForm);
        const query = formData.get('query') || 'technology';
        const limit = parseInt(formData.get('limit')) || 50;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.setLoadingState(true);
        this.clearAlerts();
        
        try {
            const response = await fetch('web/trigger/run', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    query: query,
                    limit: limit.toString()
                })
            });

            const data = await response.json();

            if (response.ok) {
                this.showAlert('success', `–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–ø—Ä–æ—Å: "${data.query}", –ª–∏–º–∏—Ç: ${data.limit}`);
                this.runForm.reset();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                this.showProgressInfo(data);
            } else {
                throw new Error(data.detail || `HTTP ${response.status}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            this.showAlert('error', `–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            this.setLoadingState(false);
        }
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {boolean} loading - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoadingState(loading) {
        if (!this.submitButton) return;

        if (loading) {
            this.submitButton.disabled = true;
            this.submitButton.innerHTML = '<span class="loading"></span> –ó–∞–ø—É—Å–∫...';
        } else {
            this.submitButton.disabled = false;
            this.submitButton.innerHTML = '‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É';
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {string} type - —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, info)
     * @param {string} message - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    showAlert(type, message) {
        if (!this.alertContainer) return;

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type}`;
        alertDiv.textContent = message;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButton = document.createElement('button');
        closeButton.innerHTML = '√ó';
        closeButton.style.cssText = `
            float: right;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            margin-left: 10px;
            opacity: 0.7;
        `;
        closeButton.onclick = () => alertDiv.remove();
        alertDiv.appendChild(closeButton);

        this.alertContainer.appendChild(alertDiv);

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (alertDiv.parentNode) {
                alertDiv.remove();
            }
        }, 10000);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    clearAlerts() {
        if (this.alertContainer) {
            this.alertContainer.innerHTML = '';
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
     * @param {object} data - –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
     */
    showProgressInfo(data) {
        const progressMessage = `
            <strong>–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å:</strong><br>
            üìä –ó–∞–ø—Ä–æ—Å: ${data.query}<br>
            üìè –õ–∏–º–∏—Ç —Å—Ç–∞—Ç–µ–π: ${data.limit}<br>
            ‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date(data.timestamp).toLocaleString('ru-RU')}<br>
            üí° –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        `;
        
        this.showAlert('info', progressMessage);
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ API URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     * @param {string} url - URL –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async copyToClipboard(url) {
        try {
            await navigator.clipboard.writeText(url);
            this.showAlert('success', `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${url}`);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = url;
            document.body.appendChild(textArea);
            textArea.select();
            
            try {
                document.execCommand('copy');
                this.showAlert('success', `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${url}`);
            } catch (e) {
                this.showAlert('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL');
            }
            
            document.body.removeChild(textArea);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
     * @param {number} num - —á–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
     */
    formatNumber(num) {
        return new Intl.NumberFormat('ru-RU').format(num);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
     * @returns {boolean} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateForm() {
        const limitInput = document.getElementById('limit');
        if (!limitInput) return true;

        const limit = parseInt(limitInput.value);
        if (isNaN(limit) || limit < 1 || limit > 1000) {
            this.showAlert('error', '–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1000');
            limitInput.focus();
            return false;
        }

        return true;
    }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã
 */
const Utils = {
    /**
     * –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {function} func - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
     * @param {number} wait - –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @returns {function} –¥–µ–±–∞—É–Ω—Å–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
     * @returns {Promise<boolean>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    async checkApiAvailability() {
        try {
            const response = await fetch('health', { 
                method: 'HEAD',
                cache: 'no-cache'
            });
            return response.ok;
        } catch {
            return false;
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('‚òï Coffee Grinder v2 - Frontend –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    window.coffeeGrinderApp = new CoffeeGrinderApp();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è API —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('.api-link').forEach(link => {
        link.addEventListener('click', async (e) => {
            e.preventDefault();
            const url = window.location.origin + link.getAttribute('href');
            await window.coffeeGrinderApp.copyToClipboard(url);
        });
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JavaScript
window.addEventListener('error', (event) => {
    console.error('JavaScript –æ—à–∏–±–∫–∞:', event.error);
    
    if (window.coffeeGrinderApp) {
        window.coffeeGrinderApp.showAlert('error', 
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ JavaScript. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞.');
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { CoffeeGrinderApp, Utils };
} 