# /scripts/debug_with_raw_response.py

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.news.fetcher_fabric import create_news_fetcher_from_config
from dotenv import load_dotenv

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –°–æ–∑–¥–∞–µ–º fetcher –¥–ª—è MediaStack
    fetcher = create_news_fetcher_from_config("mediastack")
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º raw response –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("=" * 60)
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º raw response –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ò–∑–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ _make_request –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    original_make_request = fetcher._make_request
    
    def debug_make_request(endpoint, params):
        print(f"üîß –í—ã–∑–æ–≤ API: {endpoint}")
        print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        url = f"{fetcher.base_url}/{endpoint}"
        params["access_key"] = fetcher.access_key
        
        result = fetcher._make_request_with_retries(
            session=fetcher.session,
            url=url,
            params=params,
            timeout=30
        )
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {result['error']}")
            return result
        
        response = result["response"]
        print(f"‚úÖ HTTP Status: {response.status_code}")
        print(f"üìä Raw Response: {response.text}")
        
        try:
            data = response.json()
            
            if "error" in data:
                error_info = data["error"]
                error_msg = error_info.get("message", "Unknown API error")
                error_code = error_info.get("code", "unknown_error")
                print(f"‚ùå API Error [{error_code}]: {error_msg}")
                
                from src.services.news.fetchers.base import NewsAPIError
                return {"error": NewsAPIError(f"[{error_code}] {error_msg}", response.status_code, 1)}
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: {len(data.get('data', []))}")
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            from src.services.news.fetchers.base import NewsAPIError
            return {"error": NewsAPIError(f"Failed to parse JSON: {str(e)}", response.status_code, 1)}
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    fetcher._make_request = debug_make_request
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    print("üìã –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç washington-post")
    response = fetcher.fetch_news(domains="washingtonpost.com", limit=5)
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    if "error" in response:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response['error']}")
    else:
        articles = response.get("articles", [])
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
        if articles:
            print(f"   üì∞ –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è: {articles[0].get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")

if __name__ == "__main__":
    main() 