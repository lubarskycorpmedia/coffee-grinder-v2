# /src/run.py
# glue-—Å–∫—Ä–∏–ø—Ç: orchestrate()

import argparse
import sys
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime, timezone

from src.services.news.news_processor import NewsProcessor, create_news_processor
from src.config import get_news_providers_settings, get_ai_settings, get_google_settings
from src.logger import setup_logger


def create_argument_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="Coffee Grinder v2 - News Processing Pipeline",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python -m src.run                          # –ü–æ–ª–Ω—ã–π pipeline
  python -m src.run --dry-run                # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
  python -m src.run --query "AI technology"  # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  python -m src.run --category tech --limit 20  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ª–∏–º–∏—Ç
        """
    )
    
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: –≤—ã–ø–æ–ª–Ω–∏—Ç—å fetching –∏ processing, –Ω–æ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Google Sheets"
    )
    
    parser.add_argument(
        "--query",
        type=str,
        help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"
    )
    
    parser.add_argument(
        "--category",
        type=str,
        help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (tech, business, sports, etc.)"
    )
    
    parser.add_argument(
        "--language",
        type=str,
        default="en",
        help="–Ø–∑—ã–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: en)"
    )
    
    parser.add_argument(
        "--limit",
        type=int,
        default=50,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)"
    )
    
    parser.add_argument(
        "--provider",
        type=str,
        default=None,
        help="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )
    
    return parser


def validate_environment() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    logger = setup_logger(__name__)
    validation_results = {
        "valid": True,
        "errors": [],
        "warnings": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    try:
        providers_settings = get_news_providers_settings()
        enabled_providers = providers_settings.get_enabled_providers()
        
        if not enabled_providers:
            validation_results["errors"].append("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
            validation_results["valid"] = False
        else:
            logger.info(f"‚úì News API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {list(enabled_providers.keys())}")
    except Exception as e:
        validation_results["errors"].append(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        validation_results["valid"] = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
    try:
        ai_settings = get_ai_settings()
        if not ai_settings.OPENAI_API_KEY:
            validation_results["errors"].append("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            validation_results["valid"] = False
        else:
            logger.info("‚úì OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except Exception as e:
        validation_results["errors"].append(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI: {str(e)}")
        validation_results["valid"] = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è dry-run)
    try:
        google_settings = get_google_settings()
        if not google_settings.GOOGLE_SHEET_ID:
            validation_results["warnings"].append("GOOGLE_SHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        elif not google_settings.GOOGLE_ACCOUNT_KEY:
            validation_results["warnings"].append("GOOGLE_ACCOUNT_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.info("‚úì Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    except Exception as e:
        validation_results["warnings"].append(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {str(e)}")
    
    return validation_results


async def run_pipeline(args: argparse.Namespace) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è pipeline
    """
    from src.services.news.runner import run_pipeline_from_args
    
    logger = setup_logger(__name__)
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π runner")
    
    try:
        results = await run_pipeline_from_args(args)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results["success"]:
            logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            if "providers_processed" in results:
                logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {results['providers_processed']}")
        else:
            logger.error("üíî –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏:")
            if "error" in results:
                logger.error(f"  - {results['error']}")
        
        return results
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ pipeline: {str(e)}"
        logger.error(f"üí• {error_msg}")
        return {
            "success": False,
            "error": error_msg
        }


def main() -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è orchestrator
    
    Returns:
        –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    parser = create_argument_parser()
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logger(__name__)
    
    if args.verbose:
        logger.info("üîß –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
    
    logger.info("‚òï Coffee Grinder v2 - News Processing Pipeline")
    logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫: {datetime.now(timezone.utc).isoformat()}")
    
    # –ó–∞–ø—É—Å–∫ pipeline
    results = asyncio.run(run_pipeline(args))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
    exit_code = 0 if results["success"] else 1
    
    if exit_code == 0:
        logger.info("üéâ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("üíî –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return exit_code


if __name__ == "__main__":
    sys.exit(main())

