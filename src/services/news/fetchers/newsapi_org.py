# src/services/news/fetchers/newsapi_org.py

import logging
from typing import Dict, Any, Optional, List, Union
from datetime import datetime
from urllib.parse import urlencode
from newsapi import NewsApiClient
from newsapi.newsapi_exception import NewsAPIException

from .base import BaseFetcher, NewsAPIError
from src.logger import setup_logger

logger = setup_logger(__name__)


class NewsAPIFetcher(BaseFetcher):
    """Fetcher –¥–ª—è NewsAPI.org —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    
    PROVIDER_NAME = "newsapi_org"
    
    def __init__(self, provider_settings):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è fetcher'–∞
        
        Args:
            provider_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ NewsAPISettings
        """
        super().__init__(provider_settings)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–∞–º–∏
        self.settings = provider_settings
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = provider_settings.api_key
        self.base_url = provider_settings.base_url
        self.page_size = provider_settings.page_size
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = NewsApiClient(api_key=self.api_key)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = setup_logger(__name__)
    
    def _log_api_request(self, endpoint: str, params: Dict[str, Any]) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞ –∫ NewsAPI —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º API –∫–ª—é—á–æ–º"""
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –º–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á
        masked_params = params.copy()
        masked_params['apiKey'] = 'xxx'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL (base_url —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /v2)
        url = f"{self.base_url}/{endpoint}"
        masked_url = f"{url}?{urlencode(masked_params)}"
        
        self.logger.info(f"üåê API Request: @{masked_url}")
    
    def fetch_headlines(self, **kwargs) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º)
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        """
        try:
            articles = self.fetch_news(**kwargs)
            return {"articles": articles}
        except Exception as e:
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"Failed to fetch headlines: {e}")}
    
    def fetch_all_news(self, **kwargs) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º)
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        """
        try:
            articles = self.search_news(**kwargs)
            return {"articles": articles}
        except Exception as e:
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"Failed to fetch all news: {e}")}
    
    def fetch_top_stories(self, **kwargs) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º)
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        """
        try:
            articles = self.fetch_news(**kwargs)
            return {"articles": articles}
        except Exception as e:
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"Failed to fetch top stories: {e}")}
    
    def fetch_news(self, 
                   query: Optional[str] = None,
                   category: Optional[str] = None,
                   language: Optional[str] = None,
                   limit: int = 50,
                   **kwargs) -> Dict[str, Any]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
            language: –Ø–∑—ã–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (domains, sources, etc.)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø–æ–ª–µ–º "articles"
        """
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (query, domains, from_date), –∏—Å–ø–æ–ª—å–∑—É–µ–º search_news (—ç–Ω–¥–ø–æ–∏–Ω—Ç /v2/everything)
            if query or 'domains' in kwargs or kwargs.get('from_date') or kwargs.get('to_date'):
                articles = self.search_news(
                    query=query or "*",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º wildcard –µ—Å–ª–∏ query –ø—É—Å—Ç–æ–π
                    language=language,
                    limit=limit,
                    **kwargs
                )
                return {"articles": articles}
            
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—ç–Ω–¥–ø–æ–∏–Ω—Ç /v2/top-headlines)
            # –ú–∞–ø–ø–∏–Ω–≥ category –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é NewsAPI
            api_category = self._map_rubric_to_category(category)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∑–∞–≥–æ–ª–æ–≤–∫–∏
            params = {
                'page_size': min(limit, self.page_size)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            if api_category:
                params['category'] = api_category
            
            # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if language:
                params['language'] = language
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            if 'country' in kwargs:
                params['country'] = kwargs['country']
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            self._log_api_request('top-headlines', params)
            
            response = self.client.get_top_headlines(**params)
            
            if response.get('status') != 'ok':
                logger.error(f"NewsAPI error: {response.get('message', 'Unknown error')}")
                from .base import NewsAPIError
                return {"error": NewsAPIError(f"NewsAPI error: {response.get('message', 'Unknown error')}")}
                
            articles = response.get('articles', [])
            standardized_articles = [self._standardize_article(article) for article in articles]
            return {"articles": standardized_articles}
            
        except NewsAPIException as e:
            logger.error(f"NewsAPI fetch exception: {e}")
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"NewsAPI fetch exception: {e}")}
        except Exception as e:
            logger.error(f"Unexpected error in NewsAPI fetch: {e}")
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"Unexpected error in NewsAPI fetch: {e}")}
    
    def search_news(self, 
                    query: str,
                    language: Optional[str] = None,
                    from_date: Optional[Union[datetime, str]] = None,
                    to_date: Optional[Union[datetime, str]] = None,
                    limit: int = 50,
                    **kwargs) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç /v2/everything
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
            language: –Ø–∑—ã–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞
            to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (sources, domains, etc.)
            
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            params = {
                'q': query,
                'page_size': min(limit, self.page_size),
                'sort_by': kwargs.get('sort_by', 'publishedAt')
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if language:
                params['language'] = language
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if from_date:
                if isinstance(from_date, str):
                    params['from_param'] = from_date
                else:
                    params['from_param'] = from_date.strftime('%Y-%m-%d')
            if to_date:
                if isinstance(to_date, str):
                    params['to'] = to_date
                else:
                    params['to'] = to_date.strftime('%Y-%m-%d')
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if 'sources' in kwargs:
                params['sources'] = kwargs['sources']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            if 'domains' in kwargs:
                params['domains'] = kwargs['domains']
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            self._log_api_request('everything', params)
            
            response = self.client.get_everything(**params)
            
            if response.get('status') != 'ok':
                logger.error(f"NewsAPI search error: {response.get('message', 'Unknown error')}")
                return []
                
            articles = response.get('articles', [])
            return [self._standardize_article(article) for article in articles]
            
        except NewsAPIException as e:
            logger.error(f"NewsAPI search exception: {e}")
            return []
        except Exception as e:
            logger.error(f"Unexpected error in NewsAPI search: {e}")
            return []
    
    def get_sources(self, 
                    language: Optional[str] = None,
                    category: Optional[str] = None,
                    country: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            language: –Ø–∑—ã–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            country: –°—Ç—Ä–∞–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        """
        try:
            params = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
            if language:
                params['language'] = language
            if category:
                params['category'] = category
            if country:
                params['country'] = country
                
            response = self.client.get_sources(**params)
            
            if response.get('status') != 'ok':
                logger.error(f"NewsAPI sources error: {response.get('message', 'Unknown error')}")
                return {"sources": []}
                
            sources = response.get('sources', [])
            standardized_sources = [self._standardize_source(source) for source in sources]
            return {"sources": standardized_sources}
            
        except NewsAPIException as e:
            logger.error(f"NewsAPI sources exception: {e}")
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"NewsAPI sources exception: {e}")}
        except Exception as e:
            logger.error(f"Unexpected error in NewsAPI get_sources: {e}")
            from .base import NewsAPIError
            return {"error": NewsAPIError(f"Unexpected error in NewsAPI get_sources: {e}")}
    
    def check_health(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            # –î–µ–ª–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            response = self.client.get_sources()
            
            if response.get('status') == 'ok':
                return {
                    "status": "healthy",
                    "provider": self.PROVIDER_NAME,
                    "message": "NewsAPI is accessible"
                }
            else:
                return {
                    "status": "unhealthy",
                    "provider": self.PROVIDER_NAME,
                    "message": f"NewsAPI error: {response.get('message', 'Unknown error')}"
                }
                
        except NewsAPIException as e:
            return {
                "status": "unhealthy",
                "provider": self.PROVIDER_NAME,
                "message": f"NewsAPI exception: {e}"
            }
        except Exception as e:
            return {
                "status": "unhealthy",
                "provider": self.PROVIDER_NAME,
                "message": f"Unexpected error: {e}"
            }
    
    def get_categories(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        import os
        import json
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
        categories_path = os.path.join(project_root, 'data', 'newsapi_org_categories.json')
        with open(categories_path, 'r') as f:
            categories = json.load(f)
        return categories
    
    def get_languages(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
        """
        import os
        import json
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
        languages_path = os.path.join(project_root, 'data', 'newsapi_org_languages.json')
        with open(languages_path, 'r') as f:
            languages = json.load(f)
        return languages

    def get_provider_parameters(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∏ –ø–æ–ª—è–º–∏ —Ñ–æ—Ä–º—ã
                {
                    "url": "https://newsapi.org/v2/everything",
                    "fields": {
                        "q": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                        "domains": "–î–æ–º–µ–Ω—ã"
                    }
                }
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞
        """
        import os
        import json
        
        try:
            # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
            parameters_path = os.path.join(project_root, 'data', 'newsapi_org_parameters.json')
            
            # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
            with open(parameters_path, 'r', encoding='utf-8') as f:
                parameters_data = json.load(f)
            
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å "use": "true"
            endpoints = parameters_data.get('endpoints', {})
            first_active_endpoint = None
            
            for endpoint_name, endpoint_data in endpoints.items():
                if endpoint_data.get('use') == 'true':
                    first_active_endpoint = endpoint_data
                    break
            
            if not first_active_endpoint:
                raise Exception("No active endpoint found with 'use': 'true'")
            
            # –ü–æ–ª—É—á–∞–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            endpoint_url = first_active_endpoint.get('url', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å "use": "true"
            parameters = first_active_endpoint.get('parameters', {})
            active_fields = {}
            
            for param_name, param_data in parameters.items():
                if param_data.get('use') == 'true':
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º label, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ - —Ç–æ –∫–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    label = param_data.get('label', '').strip()
                    if not label:
                        label = param_name
                    active_fields[param_name] = label
            
            return {
                "url": endpoint_url,
                "fields": active_fields
            }
            
        except FileNotFoundError as e:
            raise Exception(f"Parameters file not found: {parameters_path}") from e
        except json.JSONDecodeError as e:
            raise Exception(f"Invalid JSON in parameters file: {str(e)}") from e
        except Exception as e:
            raise Exception(f"Error reading provider parameters: {str(e)}") from e
    
    def _map_rubric_to_category(self, rubric: Optional[str]) -> Optional[str]:
        """
        –ú–∞–ø–ø–∏–Ω–≥ —Ä—É–±—Ä–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é NewsAPI
        
        Args:
            rubric: –†—É–±—Ä–∏–∫–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
            
        Returns:
            Optional[str]: –ö–∞—Ç–µ–≥–æ—Ä–∏—è NewsAPI –∏–ª–∏ None
        """
        if not rubric:
            return None
            
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä—É–±—Ä–∏–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ NewsAPI
        rubric_mapping = {
            "business": "business",
            "entertainment": "entertainment", 
            "general": "general",
            "health": "health",
            "science": "science",
            "sports": "sports",
            "technology": "technology",
            "tech": "technology",
            "sport": "sports",
            "finance": "business",
            "politics": "general",
            "world": "general",
            "national": "general",
            "local": "general"
        }
        
        return rubric_mapping.get(rubric.lower())
    
    def _standardize_article(self, article: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–∞—Ç—å–∏ NewsAPI –ø–æ–¥ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            article: –°—Ç–∞—Ç—å—è –æ—Ç NewsAPI
            
        Returns:
            Dict[str, Any]: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è
        """
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        published_at = None
        if article.get('publishedAt'):
            try:
                published_at = datetime.fromisoformat(
                    article['publishedAt'].replace('Z', '+00:00')
                )
            except ValueError:
                logger.warning(f"Failed to parse date: {article.get('publishedAt')}")
        
        return {
            'title': article.get('title', ''),
            'description': article.get('description', ''),
            'content': article.get('content', ''),
            'url': article.get('url', ''),
            'image_url': article.get('urlToImage'),
            'published_at': published_at,
            'source': {
                'name': article.get('source', {}).get('name', ''),
                'id': article.get('source', {}).get('id', '')
            },
            'author': article.get('author', ''),
            'provider': self.PROVIDER_NAME,
            'language': None,  # NewsAPI –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫
            'category': None,  # NewsAPI –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å—Ç–∞—Ç—å—è—Ö
            'raw_data': article  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
    
    def _standardize_source(self, source: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ NewsAPI –ø–æ–¥ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç NewsAPI
            
        Returns:
            Dict[str, Any]: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        """
        return {
            'id': source.get('id', ''),
            'name': source.get('name', ''),
            'description': source.get('description', ''),
            'url': source.get('url', ''),
            'category': source.get('category', ''),
            'language': source.get('language', ''),
            'country': source.get('country', ''),
            'provider': self.PROVIDER_NAME,
            'raw_data': source  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        } 