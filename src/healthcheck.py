# src/healthcheck.py

import sys
import argparse
from typing import Optional
from src.logger import setup_logger
from src.config import get_news_providers_settings, get_ai_settings, get_google_settings


def check_configuration() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    
    Returns:
        True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, False –∏–Ω–∞—á–µ
    """
    logger = setup_logger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        try:
            providers_settings = get_news_providers_settings()
            enabled_providers = providers_settings.get_enabled_providers()
            
            if not enabled_providers:
                logger.error("–ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π")
                return False
            
            logger.info(f"‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {list(enabled_providers.keys())}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
        try:
            ai_settings = get_ai_settings()
            if not ai_settings.OPENAI_API_KEY:
                logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            logger.info("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI: {e}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            google_settings = get_google_settings()
            if not google_settings.GOOGLE_SHEET_ID:
                logger.warning("GOOGLE_SHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            elif not google_settings.GOOGLE_ACCOUNT_KEY:
                logger.warning("GOOGLE_ACCOUNT_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.info("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        except Exception as e:
            logger.warning(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def check_dependencies() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    
    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, False –∏–Ω–∞—á–µ
    """
    logger = setup_logger(__name__)
    required_modules = [
        'openai',
        'langchain',
        'faiss',
        'gspread',
        'google.auth',
        'pydantic',
        'requests',
        'structlog',
        'tenacity'
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏: {missing_modules}")
        return False
    
    logger.info("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
    return True


def dry_run_check() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è dry-run —Ä–µ–∂–∏–º–∞.
    
    Returns:
        True –µ—Å–ª–∏ dry-run –≤–æ–∑–º–æ–∂–µ–Ω, False –∏–Ω–∞—á–µ
    """
    logger = setup_logger(__name__)
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from src.services.news.news_processor import create_news_processor
        from src.run import validate_environment
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        validation = validate_environment()
        if validation["errors"]:
            logger.error(f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {validation['errors']}")
            return False
        
        if validation["warnings"]:
            logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation['warnings']}")
        
        logger.info("Dry-run –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ dry-run –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def healthcheck(dry_run: bool = False) -> bool:
    """
    –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞.
    
    Args:
        dry_run: –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–∂–µ dry-run –ø—Ä–æ–≤–µ—Ä–∫—É
        
    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, False –∏–Ω–∞—á–µ
    """
    logger = setup_logger(__name__)
    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
    
    checks = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_configuration),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
    ]
    
    if dry_run:
        checks.append(("Dry-run", dry_run_check))
    
    all_passed = True
    for check_name, check_func in checks:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {check_name}")
        if not check_func():
            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ '{check_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
            all_passed = False
        else:
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ '{check_name}' –ø—Ä–æ–π–¥–µ–Ω–∞")
    
    if all_passed:
        logger.info("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("üíî –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
    
    return all_passed


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ healthcheck."""
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞")
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–∂–µ dry-run –ø—Ä–æ–≤–µ—Ä–∫—É"
    )
    
    args = parser.parse_args()
    
    success = healthcheck(dry_run=args.dry_run)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main() 