# /scripts/test_newsapi_quick.py

import sys
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def main():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsAPI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    load_dotenv()
    
    print("üîç –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NewsAPI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º fetcher –¥–ª—è NewsAPI
        from src.services.news.fetcher_fabric import create_news_fetcher_from_config
        fetcher = create_news_fetcher_from_config("newsapi")
        
        print("‚úÖ Fetcher —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...")
        health = fetcher.check_health()
        print(f"Health status: {health}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print("\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
        categories = fetcher.get_categories()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
        print("\nüåê –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤...")
        languages = fetcher.get_languages()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {languages}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print("\nüì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        sources = fetcher.get_sources()
        sources_list = sources.get('sources', [])
        print(f"–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources_list)}")
        if sources_list:
            print("–ü–µ—Ä–≤—ã–µ 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
            for source in sources_list[:5]:
                print(f"  - {source['name']} ({source['id']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π
        print("\nüî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π...")
        top_news = fetcher.fetch_news(rubric="general")
        print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(top_news)}")
        if top_news:
            print("–ü–µ—Ä–≤—ã–µ 2 –Ω–æ–≤–æ—Å—Ç–∏:")
            for article in top_news[:2]:
                print(f"  - {article['title'][:100]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        print("\nüîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É 'technology'...")
        search_results = fetcher.search_news("technology", limit=5)
        print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(search_results)}")
        if search_results:
            print("–ü–µ—Ä–≤—ã–µ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
            for article in search_results[:2]:
                print(f"  - {article['title'][:100]}...")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main() 