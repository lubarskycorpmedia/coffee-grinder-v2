#!/usr/bin/env python3
# /scripts/test_fetch_news_method.py

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch_news()
"""

import os
import sys
import json
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from src.services.news.fetcher_fabric import create_news_fetcher_with_config
from src.logger import setup_logger
from dotenv import load_dotenv

def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_file = os.path.join(project_root, '.env')
    
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
    else:
        print("‚ÑπÔ∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
    api_token = os.getenv('THENEWSAPI_API_TOKEN')
    if not api_token:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç THENEWSAPI_API_TOKEN")
        return False
    
    print("‚úÖ API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
    return True

def test_fetch_news_method():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ fetch_news()"""
    logger = setup_logger("test_fetch_news")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    os.environ.setdefault('GOOGLE_GSHEET_ID', 'test-sheet-id')
    os.environ.setdefault('GOOGLE_ACCOUNT_EMAIL', 'test@example.com')  
    os.environ.setdefault('GOOGLE_ACCOUNT_KEY', 'test-key')
    os.environ.setdefault('OPENAI_API_KEY', 'sk-test-key')
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ fetch_news()")
    
    try:
        # –°–æ–∑–¥–∞–µ–º fetcher
        fetcher = create_news_fetcher_with_config("thenewsapi")
        logger.info("‚úÖ Fetcher —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        logger.info("üîç –¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        logger.info("‚îÄ" * 50)
        
        result1 = fetcher.fetch_news(
            query="AI technology",
            language="en",
            limit=3
        )
        
        if "error" in result1:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {result1['error']}")
        else:
            articles = result1.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
            
            if articles:
                article = articles[0]
                logger.info(f"üì∞ –ü–µ—Ä–≤–∞—è —Å—Ç–∞—Ç—å—è:")
                logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {article.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
                logger.info(f"   –Ø–∑—ã–∫: {article.get('language', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"   URL: {article.get('url', '–ù–µ—Ç URL')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        logger.info("üìÇ –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        logger.info("‚îÄ" * 50)
        
        result2 = fetcher.fetch_news(
            category="technology",
            language="en",
            limit=2
        )
        
        if "error" in result2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {result2['error']}")
        else:
            articles = result2.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'technology'")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        logger.info("üîçüìÇ –¢–ï–°–¢ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–∑–∞–ø—Ä–æ—Å + –∫–∞—Ç–µ–≥–æ—Ä–∏—è)")
        logger.info("‚îÄ" * 50)
        
        result3 = fetcher.fetch_news(
            query="artificial intelligence",
            category="tech",
            language="en",
            limit=2
        )
        
        if "error" in result3:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3: {result3['error']}")
        else:
            articles = result3.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É 'AI' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 'tech'")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {article.get('category', '–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ kwargs
        logger.info("‚öôÔ∏è –¢–ï–°–¢ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ kwargs")
        logger.info("‚îÄ" * 50)
        
        result4 = fetcher.fetch_news(
            query="technology",
            language="en",
            limit=2,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            sort="published_at",
            sort_order="desc",
            published_after="2025-01-01"
        )
        
        if "error" in result4:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 4: {result4['error']}")
        else:
            articles = result4.get("articles", [])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            for i, article in enumerate(articles, 1):
                logger.info(f"üì∞ –°—Ç–∞—Ç—å—è {i}: {article.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}")
                logger.info(f"   –î–∞—Ç–∞: {article.get('published_at', '–ù–µ—Ç –¥–∞—Ç—ã')}")
        
        logger.info("")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        logger.info("üìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
        logger.info("‚îÄ" * 50)
        
        result5 = fetcher.fetch_news(query="test", limit=1)
        
        if "error" in result5:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞: {result5['error']}")
        else:
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:")
            logger.info(f"   –ï—Å—Ç—å –ø–æ–ª–µ 'articles': {'articles' in result5}")
            logger.info(f"   –ï—Å—Ç—å –ø–æ–ª–µ 'meta': {'meta' in result5}")
            
            if result5.get("articles"):
                article = result5["articles"][0]
                required_fields = ["title", "description", "url", "published_at", "source", "category", "language"]
                
                logger.info("   –ü–æ–ª—è –≤ —Å—Ç–∞—Ç—å–µ:")
                for field in required_fields:
                    has_field = field in article
                    logger.info(f"     {field}: {'‚úÖ' if has_field else '‚ùå'}")
        
        logger.info("")
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ fetch_news() –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–ê fetch_news()")
    print("=" * 60)
    
    if not load_environment():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    success = test_fetch_news_method()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üéâ –ú–µ—Ç–æ–¥ fetch_news() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
    print("=" * 60)

if __name__ == "__main__":
    main() 