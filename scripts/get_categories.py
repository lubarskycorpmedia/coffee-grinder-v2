# scripts/get_categories.py

import os
import sys
from collections import Counter

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
src_path = os.path.join(project_root, 'src')
sys.path.insert(0, src_path)
sys.path.insert(0, project_root)

from src.services.news.fetcher_fabric import create_news_fetcher


def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_file = os.path.join(project_root, '.env')
    
    if os.path.exists(env_file):
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file)
            print("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    else:
        print("‚ÑπÔ∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
    token = os.getenv('THENEWSAPI_API_TOKEN')
    if not token or token == 'your_token_here':
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç THENEWSAPI_API_TOKEN")
        return False
    
    print("‚úÖ API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω")
    return True


def get_all_categories():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ API"""
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º fetcher
        api_token = os.getenv('THENEWSAPI_API_TOKEN')
        fetcher = create_news_fetcher("thenewsapi", api_token=api_token)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources_response = fetcher.get_sources()
        
        if "error" in sources_response:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sources_response['error']}")
            return None
        
        sources = sources_response.get('data', [])
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_categories = []
        for source in sources:
            categories = source.get('categories', [])
            if isinstance(categories, list):
                all_categories.extend(categories)
            elif isinstance(categories, str):
                # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                all_categories.extend(categories.split(','))
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_counts = Counter(all_categories)
        
        print(f"\nüìä –ù–ê–ô–î–ï–ù–û {len(category_counts)} –£–ù–ò–ö–ê–õ–¨–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô:")
        print("=" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        for category in sorted(category_counts.keys()):
            count = category_counts[category]
            print(f"üìÇ {category:<20} ({count:>4} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
        
        print("=" * 60)
        print(f"üìà –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(sources)}")
        print(f"üè∑Ô∏è  –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_counts)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        print(f"\nüî• –¢–û–ü-10 –°–ê–ú–´–• –ü–û–ü–£–õ–Ø–†–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô:")
        print("-" * 40)
        for category, count in category_counts.most_common(10):
            print(f"ü•á {category:<20} ({count:>4} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
        
        return sorted(category_counts.keys())
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üìÇ –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –î–û–°–¢–£–ü–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_environment():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API —Ç–æ–∫–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = get_all_categories()
    
    if categories:
        print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –≤—Å–µ {len(categories)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        categories_file = os.path.join(project_root, 'scripts', 'available_categories.txt')
        with open(categories_file, 'w', encoding='utf-8') as f:
            f.write("# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ TheNewsAPI.com\n")
            f.write(f"# –ü–æ–ª—É—á–µ–Ω–æ: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n")
            for category in categories:
                f.write(f"{category}\n")
        
        print(f"üìù –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {categories_file}")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")


if __name__ == "__main__":
    main() 