import { useState, useEffect, useRef } from 'react'
import { useQuery, useMutation, useQueryClient } from 'react-query'
import toast from 'react-hot-toast'
import { PlayIcon, ClockIcon, CheckCircleIcon, ExclamationTriangleIcon, DocumentTextIcon, XMarkIcon } from '@heroicons/react/24/outline'

interface ProcessingStatus {
  state: 'idle' | 'running' | 'completed' | 'error'
  percent: number
  current_provider: string
  processed_providers: string[]
  message: string
  timestamp: string
  service_status: string
  redis_connected: boolean
  config_exists: boolean
  start_time?: string
  end_time?: string
  duration?: number
}

interface LogEntry {
  timestamp: string
  level: string
  method: string
  message: string
  rawLine: string
}

interface TaskLogGroup {
  taskId: string
  taskName: string
  startTime: string
  endTime?: string
  logs: LogEntry[]
  isExpanded: boolean
}

interface LogsResponse {
  success: boolean
  lines_requested: number
  lines_returned: number
  log_file: string | null
  logs: string[]
  timestamp: string
}

const StatusDashboard = () => {
  const [isDryRun, setIsDryRun] = useState(false)
  const [isPolling, setIsPolling] = useState(false)
  const [statusUpdateLoading, setStatusUpdateLoading] = useState(false)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–≥–æ–≤
  const [showLogsModal, setShowLogsModal] = useState(false)
  const [logs, setLogs] = useState<LogEntry[]>([])
  const [taskLogGroups, setTaskLogGroups] = useState<TaskLogGroup[]>([])
  const [filteredTaskGroups, setFilteredTaskGroups] = useState<TaskLogGroup[]>([])
  const [logFilter, setLogFilter] = useState<string>('ALL') // ALL, INFO, ERROR, DEBUG, WARNING
  const [isLoadingLogs, setIsLoadingLogs] = useState(false)
  const [tasksLogsCount] = useState(10) // –ü–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥, –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ API
  
  const queryClient = useQueryClient()
  const intervalRef = useRef<number>()
  const lastStatusRef = useRef<ProcessingStatus>()
  const logsContainerRef = useRef<HTMLDivElement>(null)

  // –§—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ª–æ–≥–æ–≤ –ø–æ –∑–∞–¥–∞—á–∞–º
  const groupLogsByTasks = (logs: LogEntry[]): TaskLogGroup[] => {
    const groups: TaskLogGroup[] = []
    let currentGroup: TaskLogGroup | null = null
    
    logs.forEach((log, index) => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
      const isTaskStart = log.message.includes('Pipeline started - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') ||
                         log.message.includes('Starting - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞') ||
                         (index === 0) // –ü–µ—Ä–≤—ã–π –ª–æ–≥ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–¥–∞—á—É

      const isTaskEnd = log.message.includes('Pipeline finished - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ pipeline') ||
                       log.message.includes('Pipeline completed - –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞') ||
                       log.message.includes('Completed - –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞')

      if (isTaskStart || !currentGroup) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if (currentGroup && !currentGroup.endTime) {
          currentGroup.endTime = log.timestamp
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        const taskName = extractTaskName(log.message) || `–ó–∞–¥–∞—á–∞ ${groups.length + 1}`
        currentGroup = {
          taskId: `task_${Date.now()}_${index}`,
          taskName,
          startTime: log.timestamp,
          logs: [log],
          isExpanded: groups.length === 0 // –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        groups.push(currentGroup)
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
        currentGroup.logs.push(log)
        
        if (isTaskEnd) {
          currentGroup.endTime = log.timestamp
        }
      }
    })
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
    return groups.slice(-tasksLogsCount)
  }

  // –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  const extractTaskName = (message: string): string | null => {
    // –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ pipeline
    if (message.includes('Pipeline started - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π')) {
      return 'üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π'
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (message.includes('Starting - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:')) {
      const match = message.match(/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:\s*([^\s]+)/i)
      return match ? `üì° ${match[1]}` : 'üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä'
    }
    
    // –§–∞–ª–ª–±–µ–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if (message.includes('–ø—Ä–æ–≤–∞–π–¥–µ—Ä')) {
      const match = message.match(/–ø—Ä–æ–≤–∞–π–¥–µ—Ä[:\s]([^,\s]+)/i)
      return match ? `üì° ${match[1]}` : 'üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä'
    }
    
    if (message.includes('Pipeline')) {
      return 'üîÑ Pipeline'
    }
    
    return null
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
  const toggleTaskGroup = (taskId: string) => {
    setTaskLogGroups(prev => 
      prev.map(group => 
        group.taskId === taskId 
          ? { ...group, isExpanded: !group.isExpanded }
          : group
      )
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞
  const parseLogLine = (line: string): LogEntry => {
    // –†–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: "2025-07-16 11:45:32 - src.services.news.pipeline - INFO - message"
    const containerFormat = /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s*-\s*([^-]+)\s*-\s*(\w+)\s*-\s*(.+)$/
    
    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏: "2024-01-15 10:30:45,123 - coffee_grinder - INFO - message"
    const oldFormat = /^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}[,\.]\d{3})\s*-\s*([^-]+)\s*-\s*(\w+)\s*-\s*(.+)$/
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç "LEVEL: message"
    const simpleFormat = /^(\w+):\s*(.+)$/
    
    let match = line.match(containerFormat)
    if (match) {
      const [, timestamp, module, level, message] = match
      return {
        timestamp: timestamp.trim(),
        level: level.trim(),
        method: module.trim(),
        message: message.trim(),
        rawLine: line
      }
    }
    
    match = line.match(oldFormat)
    if (match) {
      const [, timestamp, module, level, message] = match
      return {
        timestamp: timestamp.trim(),
        level: level.trim(),
        method: module.trim(),
        message: message.trim(),
        rawLine: line
      }
    }
    
    match = line.match(simpleFormat)
    if (match) {
      const [, level, message] = match
      return {
        timestamp: new Date().toISOString().slice(11, 19),
        level: level.trim(),
        method: 'system',
        message: message.trim(),
        rawLine: line
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return {
      timestamp: new Date().toISOString().slice(11, 19),
      level: 'INFO',
      method: 'system',
      message: line.trim(),
      rawLine: line
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
  const fetchLogs = async () => {
    setIsLoadingLogs(true)
    try {
      const response = await fetch('/news/api/logs?lines=200', {
        headers: {
          'X-API-Key': 'development_key'
        }
      })
      
      if (!response.ok) {
        throw new Error('Failed to fetch logs')
      }
      
      const data: LogsResponse = await response.json()
      
      if (data.success && data.logs) {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –í–°–ï –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const parsedLogs = data.logs.map(parseLogLine)
        
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –ª–æ–≥–æ–≤:', data.logs.length)
        console.log('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–æ–∫:', data.logs.slice(0, 3))
        
        setLogs(parsedLogs)
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
        const groups = groupLogsByTasks(parsedLogs)
        setTaskLogGroups(groups)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error)
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤')
    } finally {
      setIsLoadingLogs(false)
    }
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –ª–æ–≥–æ–≤
  useEffect(() => {
    if (logFilter === 'ALL') {
      setFilteredTaskGroups(taskLogGroups)
    } else {
      const filtered = taskLogGroups.map(group => ({
        ...group,
        logs: group.logs.filter((log: LogEntry) => log.level === logFilter)
      })).filter(group => group.logs.length > 0)
      setFilteredTaskGroups(filtered)
    }
  }, [taskLogGroups, logFilter])

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º –ª–æ–≥–∞–º
  useEffect(() => {
    if (logsContainerRef.current && showLogsModal) {
      logsContainerRef.current.scrollTop = logsContainerRef.current.scrollHeight
    }
  }, [filteredTaskGroups, showLogsModal])

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
  const clearLogs = () => {
    setLogs([])
    setTaskLogGroups([])
    setFilteredTaskGroups([])
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ë–ï–ó –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const { data: status, isLoading, refetch } = useQuery<ProcessingStatus>(
    'processing-status',
    async () => {
      const response = await fetch('/news/api/status', {
        headers: {
          'X-API-Key': 'development_key'
        }
      })
      if (!response.ok) {
        throw new Error('Failed to fetch status')
      }
      return response.json()
    },
    {
      refetchInterval: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      refetchIntervalInBackground: false,
    }
  )

  // –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
  const hasStatusChanged = (newStatus: ProcessingStatus, oldStatus?: ProcessingStatus) => {
    if (!oldStatus) return true
    
    return (
      newStatus.state !== oldStatus.state ||
      newStatus.percent !== oldStatus.percent ||
      newStatus.current_provider !== oldStatus.current_provider ||
      newStatus.message !== oldStatus.message ||
      newStatus.processed_providers.length !== oldStatus.processed_providers.length ||
      newStatus.service_status !== oldStatus.service_status ||
      newStatus.redis_connected !== oldStatus.redis_connected ||
      newStatus.config_exists !== oldStatus.config_exists
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
  const pollStatus = async () => {
    setStatusUpdateLoading(true)
    try {
      const { data: newStatus } = await refetch()
      
      if (newStatus && hasStatusChanged(newStatus, lastStatusRef.current)) {
        lastStatusRef.current = newStatus
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å
        if (newStatus.state === 'completed' || newStatus.state === 'error') {
          setIsPolling(false)
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ –∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
      if (showLogsModal && newStatus?.state === 'running') {
        await fetchLogs()
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞:', error)
    } finally {
      setStatusUpdateLoading(false)
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ–ø—Ä–æ—Å–∞
  useEffect(() => {
    if (status) {
      lastStatusRef.current = status
      
      // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞
      if (status.state === 'running' && !isPolling) {
        setIsPolling(true)
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
      if (status.state !== 'running' && isPolling) {
        setIsPolling(false)
      }
    }
  }, [status?.state])

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  useEffect(() => {
    if (isPolling) {
      intervalRef.current = setInterval(pollStatus, 5000)
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [isPolling])

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [])

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const triggerMutation = useMutation(
    async () => {
      const response = await fetch('/news/api/trigger', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-API-Key': 'development_key'
        },
        body: JSON.stringify({ dry_run: isDryRun })
      })
      
      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.detail || 'Failed to start processing')
      }
      
      return response.json()
    },
    {
      onSuccess: () => {
        toast.success('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')
        queryClient.invalidateQueries('processing-status')
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        setIsPolling(true)
      },
      onError: (error: Error) => {
        toast.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`)
      }
    }
  )

  const getStatusColor = (state: string) => {
    switch (state) {
      case 'running':
        return 'text-coffee-cream'
      case 'completed':
        return 'text-coffee-cream'
      case 'error':
        return 'text-red-400'
      default:
        return 'text-coffee-cream'
    }
  }

  const getStatusIcon = (state: string) => {
    switch (state) {
      case 'running':
        return <ClockIcon className="h-6 w-6 text-coffee-cream" />
      case 'completed':
        return <CheckCircleIcon className="h-6 w-6 text-coffee-cream" />
      case 'error':
        return <ExclamationTriangleIcon className="h-6 w-6 text-red-400" />
      default:
        return <PlayIcon className="h-6 w-6 text-coffee-cream" />
    }
  }

  const getStatusText = (state: string) => {
    switch (state) {
      case 'running':
        return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
      case 'error':
        return '–û—à–∏–±–∫–∞'
      case 'idle':
        return '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É'
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusTimeInfo = (status: ProcessingStatus): { timeString: string; label: string } | null => {
    const formatTime = (timeString: string): string => {
      const date = new Date(timeString)
      const day = date.getDate().toString().padStart(2, '0')
      const month = (date.getMonth() + 1).toString().padStart(2, '0')
      const year = date.getFullYear()
      const hours = date.getHours().toString().padStart(2, '0')
      const minutes = date.getMinutes().toString().padStart(2, '0')
      const seconds = date.getSeconds().toString().padStart(2, '0')
      return `${day}.${month}.${year}, ${hours}:${minutes}:${seconds}`
    }

    switch (status.state) {
      case 'running':
        if (status.start_time) {
          return {
            timeString: formatTime(status.start_time),
            label: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:'
          }
        }
        break
      
      case 'completed':
        if (status.end_time) {
          return {
            timeString: formatTime(status.end_time),
            label: '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:'
          }
        }
        break
      
      case 'error':
        if (status.end_time) {
          return {
            timeString: formatTime(status.end_time),
            label: '–í—Ä–µ–º—è –æ—à–∏–±–∫–∏:'
          }
        }
        break
      
      case 'idle':
        if (status.end_time) {
          return {
            timeString: formatTime(status.end_time),
            label: '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ:'
          }
        } else if (status.timestamp) {
          return {
            timeString: formatTime(status.timestamp),
            label: '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:'
          }
        }
        break
    }

    return null
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-coffee-cream"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Status Card */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-coffee-cream">
            –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
          </h2>
          <div className="flex items-center space-x-2">
            {status && getStatusIcon(status.state)}
            <span className={`font-medium ${status && getStatusColor(status.state)}`}>
              {status && getStatusText(status.state)}
            </span>
            {(status?.state === 'running' || statusUpdateLoading) && (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-coffee-cream opacity-70"></div>
            )}
          </div>
        </div>

        {status && (
          <div className="space-y-4">
            {/* Progress Bar */}
            {status.state === 'running' && (
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-coffee-cream">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                  <span className="text-sm font-medium text-coffee-cream">
                    {status.percent}%
                  </span>
                </div>
                <div className="w-full bg-coffee-light/30 rounded-full h-2">
                  <div 
                    className="bg-coffee-dark h-2 rounded-full transition-all duration-300"
                    style={{ width: `${status.percent}%` }}
                  ></div>
                </div>
              </div>
            )}

            {/* Current Status Message */}
            <div className="bg-coffee-cream/50 rounded-lg p-3">
              <p className="text-sm text-coffee-cream">
                <strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {status.message}
                {(() => {
                  const timeInfo = getStatusTimeInfo(status)
                  if (timeInfo) {
                    return ` (${timeInfo.label} ${timeInfo.timeString})`
                  }
                  return ''
                })()}
              </p>
              {status.current_provider && (
                <p className="text-sm text-coffee-cream mt-1">
                  <strong>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> {status.current_provider}
                </p>
              )}
              {status.state === 'completed' && status.duration && (
                <div className="mt-2">
                  <p className="text-sm text-coffee-cream">
                    <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {(() => {
                      const totalSeconds = Math.round(status.duration!)
                      const hours = Math.floor(totalSeconds / 3600)
                      const minutes = Math.floor((totalSeconds % 3600) / 60)
                      const seconds = totalSeconds % 60
                      
                      if (hours > 0) {
                        return `${hours} —á–∞—Å ${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`
                      } else if (minutes > 0) {
                        return `${minutes} –º–∏–Ω ${seconds} —Å–µ–∫`
                      } else {
                        return `${seconds} —Å–µ–∫`
                      }
                    })()}
                  </p>
                </div>
              )}
            </div>

            {/* Processed Providers */}
            {status.processed_providers.length > 0 && (
              <div className="flex flex-wrap items-center gap-2">
                <span className="text-sm font-bold text-coffee-cream">
                  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:
                </span>
                {status.processed_providers.map((provider) => (
                  <span 
                    key={provider}
                    className="px-2 py-1 bg-coffee-light text-coffee-foam text-xs rounded-full"
                  >
                    {provider}
                  </span>
                ))}
              </div>
            )}

            {/* System Status */}
            <div className="grid grid-cols-4 gap-4 text-sm">
              <div className="text-center">
                <p className="text-coffee-cream">–°–µ—Ä–≤–∏—Å</p>
                <p className={`font-medium ${
                  status.service_status === 'running' ? 'text-coffee-cream' : 'text-red-400'
                }`}>
                  {status.service_status === 'running' ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
                </p>
              </div>
              <div className="text-center">
                <p className="text-coffee-cream">Redis</p>
                <p className={`font-medium ${
                  status.redis_connected ? 'text-coffee-cream' : 'text-red-400'
                }`}>
                  {status.redis_connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                </p>
              </div>
              <div className="text-center">
                <p className="text-coffee-cream">–ö–æ–Ω—Ñ–∏–≥</p>
                <p className={`font-medium ${
                  status.config_exists ? 'text-coffee-cream' : 'text-red-400'
                }`}>
                  {status.config_exists ? '–°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                </p>
              </div>
              <div className="flex justify-center items-center">
                <button
                  onClick={() => {
                    setShowLogsModal(true)
                    fetchLogs()
                  }}
                  className="btn-secondary flex items-center justify-center space-x-2 px-4 py-2"
                  title="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                >
                  <DocumentTextIcon className="h-4 w-4" />
                  <span>–õ–æ–≥–∏</span>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Control Panel */}
      <div className="card">
        <h2 className="text-xl font-semibold text-coffee-cream mb-4">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        </h2>

        <div className="space-y-4">
          {/* Dry Run Toggle */}
          <div className="flex items-center space-x-3">
            <input 
              type="checkbox"
              id="dry-run"
              checked={isDryRun}
              onChange={(e) => setIsDryRun(e.target.checked)}
              className="h-4 w-4 text-coffee-dark focus:ring-coffee-medium border-coffee-light rounded"
            />
            <label htmlFor="dry-run" className="text-coffee-cream">
              –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets)
            </label>
          </div>

          {/* Trigger Button */}
          <button
            onClick={() => triggerMutation.mutate()}
            disabled={
              triggerMutation.isLoading || 
              status?.state === 'running' ||
              !status?.config_exists
            }
            className="btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {triggerMutation.isLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>–ó–∞–ø—É—Å–∫...</span>
              </>
            ) : (
              <>
                <PlayIcon className="h-4 w-4" />
                <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É</span>
              </>
            )}
          </button>

          {!status?.config_exists && (
            <p className="text-red-400 text-sm text-center">
              ‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            </p>
          )}
        </div>
      </div>

      {/* Last Update */}
      {status && (
        <div className="text-center text-coffee-cream text-sm">
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date(status.timestamp).toLocaleString('ru-RU')}
        </div>
      )}

      {/* Logs Modal */}
      {showLogsModal && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          onClick={() => setShowLogsModal(false)}
        >
          <div 
            className="bg-coffee-light rounded-lg shadow-xl w-full max-w-6xl h-[80vh] flex flex-col"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Modal Header */}
            <div className="flex items-center justify-between p-6 border-b border-coffee-medium">
              <div className="flex items-center space-x-3">
                <DocumentTextIcon className="h-6 w-6 text-coffee-cream" />
                <h2 className="text-xl font-semibold text-coffee-cream">
                  –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
                </h2>
                {isLoadingLogs && (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-coffee-cream"></div>
                )}
              </div>
              
              <div className="flex items-center space-x-4">
                {/* Log Level Filter */}
                <select
                  value={logFilter}
                  onChange={(e) => setLogFilter(e.target.value)}
                  className="bg-coffee-medium text-coffee-cream border border-coffee-dark rounded px-3 py-1 text-sm"
                >
                  <option value="ALL">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
                  <option value="INFO">INFO</option>
                  <option value="ERROR">ERROR</option>
                  <option value="DEBUG">DEBUG</option>
                  <option value="WARNING">WARNING</option>
                </select>

                {/* Clear Logs Button */}
                <button
                  onClick={clearLogs}
                  className="bg-coffee-medium hover:bg-coffee-dark text-coffee-cream px-3 py-1 rounded text-sm"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </button>

                {/* Close Button */}
                <button
                  onClick={() => setShowLogsModal(false)}
                  className="text-coffee-cream hover:text-white"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </div>
            </div>

            {/* Modal Body - Logs Container */}
            <div className="flex-1 overflow-hidden">
              <div 
                ref={logsContainerRef}
                className="h-full overflow-y-auto p-4 space-y-3 bg-gray-900 text-green-400 font-mono text-sm"
              >
                {filteredTaskGroups.length === 0 ? (
                  <div className="text-gray-500 text-center py-8">
                    {taskLogGroups.length === 0 ? '–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞'}
                  </div>
                ) : (
                  filteredTaskGroups.map((taskGroup) => (
                    <div key={taskGroup.taskId} className="border border-gray-700 rounded-lg">
                      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ */}
                      <div 
                        className="flex items-center justify-between p-3 bg-gray-800 hover:bg-gray-750 cursor-pointer rounded-t-lg"
                        onClick={() => toggleTaskGroup(taskGroup.taskId)}
                      >
                        <div className="flex items-center space-x-3">
                          <span className="text-white font-semibold">
                            {taskGroup.taskName}
                          </span>
                          <span className="text-gray-400 text-xs">
                            {taskGroup.startTime.slice(11, 19)}
                            {taskGroup.endTime && ` - ${taskGroup.endTime.slice(11, 19)}`}
                          </span>
                          <span className="bg-gray-600 text-gray-300 px-2 py-1 rounded text-xs">
                            {taskGroup.logs.length} –∑–∞–ø–∏—Å–µ–π
                          </span>
                        </div>
                        <div className="flex items-center space-x-2">
                          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –ª–æ–≥–∞–º */}
                          {taskGroup.logs.some(log => log.level === 'ERROR') ? (
                            <span className="bg-red-500 w-3 h-3 rounded-full" title="–ï—Å—Ç—å –æ—à–∏–±–∫–∏"></span>
                          ) : taskGroup.logs.some(log => log.level === 'WARNING') ? (
                            <span className="bg-yellow-500 w-3 h-3 rounded-full" title="–ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"></span>
                          ) : (
                            <span className="bg-green-500 w-3 h-3 rounded-full" title="–£—Å–ø–µ—à–Ω–æ"></span>
                          )}
                          <span className="text-gray-400">
                            {taskGroup.isExpanded ? '‚ñº' : '‚ñ∂'}
                          </span>
                        </div>
                      </div>

                      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ */}
                      {taskGroup.isExpanded && (
                        <div className="border-t border-gray-700">
                          {taskGroup.logs.map((log, index) => (
                            <div key={index} className="flex space-x-3 hover:bg-gray-800 px-3 py-2 border-b border-gray-800 last:border-b-0">
                              {/* Timestamp */}
                              <span className="text-blue-400 shrink-0 w-20 text-xs">
                                {log.timestamp.slice(11, 19)}
                              </span>
                              
                              {/* Level */}
                              <span className={`shrink-0 w-16 font-semibold text-xs ${
                                log.level === 'ERROR' ? 'text-red-400' :
                                log.level === 'WARNING' ? 'text-yellow-400' :
                                log.level === 'DEBUG' ? 'text-purple-400' :
                                'text-green-400'
                              }`}>
                                {log.level}
                              </span>
                              
                              {/* Method */}
                              {/* <span className="text-cyan-400 shrink-0 w-48 truncate text-xs" title={log.method}>
                                {log.method}
                              </span> */}
                              
                              {/* Message */}
                              <span className="text-white flex-1 text-xs leading-relaxed">
                                {log.message}
                              </span>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  ))
                )}
              </div>
            </div>

            {/* Modal Footer */}
            <div className="p-4 border-t border-coffee-medium bg-coffee-medium/50">
              <div className="flex items-center justify-between text-sm text-coffee-cream">
                <span>
                  –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredTaskGroups.length} –∑–∞–¥–∞—á –∏–∑ {taskLogGroups.length} 
                  ({filteredTaskGroups.reduce((total, group) => total + group.logs.length, 0)} –∑–∞–ø–∏—Å–µ–π)
                  {tasksLogsCount < taskLogGroups.length && ` ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ${tasksLogsCount} –∑–∞–¥–∞—á–∞–º–∏`}
                </span>
                <span>
                  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status?.state === 'running' ? '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' : '–≤—Ä—É—á–Ω—É—é'}
                </span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default StatusDashboard 