# /src/run.py
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è cron –∑–∞–ø—É—Å–∫–∞

import sys
from datetime import datetime, timezone

from src.services.news.runner import run_news_parsing_sync
from src.logger import setup_logger


def main() -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è cron –∑–∞–ø—É—Å–∫–∞
    
    Returns:
        –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logger(__name__)
    
    logger.info("‚òï Coffee Grinder v2 - News Processing Pipeline")
    logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫: {datetime.now(timezone.utc).isoformat()}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        results = run_news_parsing_sync()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        exit_code = 0 if results["success"] else 1
        
        if exit_code == 0:
            logger.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if "providers_processed" in results:
                logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {results['providers_processed']}")
        else:
            logger.error("üíî –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            if "error" in results:
                logger.error(f"  - {results['error']}")
        
        return exit_code
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

